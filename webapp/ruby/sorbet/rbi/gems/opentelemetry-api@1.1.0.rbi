# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-api` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-api`.

# OpenTelemetry is an open source observability framework, providing a
# general-purpose API, SDK, and related tools required for the instrumentation
# of cloud-native software, frameworks, and libraries.
#
# The OpenTelemetry module provides global accessors for telemetry objects.
#
# source://opentelemetry-api//lib/opentelemetry/error.rb#6
module OpenTelemetry
  extend ::OpenTelemetry

  # @return [Callable] configured error handler or a default that logs the
  #   exception and message at ERROR level.
  #
  # source://opentelemetry-api//lib/opentelemetry.rb#36
  def error_handler; end

  # Sets the attribute error_handler
  #
  # @param value the value to set the attribute error_handler to.
  #
  # source://opentelemetry-api//lib/opentelemetry.rb#27
  def error_handler=(_arg0); end

  # Handles an error by calling the configured error_handler.
  #
  # @param exception [optional Exception] The exception to be handled
  # @param message [optional String] An error message.
  #
  # source://opentelemetry-api//lib/opentelemetry.rb#44
  def handle_error(exception: T.unsafe(nil), message: T.unsafe(nil)); end

  # @return [Object, Logger] configured Logger or a default STDOUT Logger.
  #
  # source://opentelemetry-api//lib/opentelemetry.rb#30
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://opentelemetry-api//lib/opentelemetry.rb#27
  def logger=(_arg0); end

  # @return [Context::Propagation::Propagator] a propagator instance
  #
  # source://opentelemetry-api//lib/opentelemetry.rb#69
  def propagation; end

  # Sets the attribute propagation
  #
  # @param value the value to set the attribute propagation to.
  #
  # source://opentelemetry-api//lib/opentelemetry.rb#27
  def propagation=(_arg0); end

  # @return [Object, Trace::TracerProvider] registered tracer provider or a
  #   default no-op implementation of the tracer provider.
  #
  # source://opentelemetry-api//lib/opentelemetry.rb#64
  def tracer_provider; end

  # Register the global tracer provider.
  #
  # @param provider [TracerProvider] A tracer provider to register as the
  #   global instance.
  #
  # source://opentelemetry-api//lib/opentelemetry.rb#52
  def tracer_provider=(provider); end
end

# The Baggage module provides functionality to record and propagate
# baggage in a distributed trace
#
# source://opentelemetry-api//lib/opentelemetry/baggage/propagation/context_keys.rb#8
module OpenTelemetry::Baggage
  extend ::OpenTelemetry::Baggage

  # Used to chain modifications to baggage. The result is a
  # context with an updated baggage. If only a single
  # modification is being made to baggage, use the other
  # methods on +Baggage+, if multiple modifications are being made, use
  # this one.
  #
  # @param context [optional Context] The context to update with with new
  #   modified baggage. Defaults to +Context.current+
  # @return [Context]
  # @yield [builder]
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage.rb#30
  def build(context: T.unsafe(nil)); end

  # Returns a new context with empty baggage
  #
  # @param context [optional Context] Context to clear baggage from. Defaults
  #   to +Context.current+
  # @return [Context]
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage.rb#41
  def clear(context: T.unsafe(nil)); end

  # @api private
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage.rb#67
  def raw_entries(context: T.unsafe(nil)); end

  # Returns a new context with value at key removed
  #
  # @param key [String] The key to remove
  # @param context [optional Context] The context to remove baggage
  #   from. Defaults to +Context.current+
  # @return [Context]
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage.rb#94
  def remove_value(key, context: T.unsafe(nil)); end

  # Returns a new context with new key-value pair
  #
  # @param key [String] The key to store this value under
  # @param value [String] String value to be stored under key
  # @param metadata [optional String] This is here to store properties
  #   received from other W3C Baggage impelmentations but is not exposed in
  #   OpenTelemetry. This is condsidered private API and not for use by
  #   end-users.
  # @param context [optional Context] The context to update with new
  #   value. Defaults to +Context.current+
  # @return [Context]
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage.rb#82
  def set_value(key, value, metadata: T.unsafe(nil), context: T.unsafe(nil)); end

  # Returns the corresponding baggage.entry (or nil) for key
  #
  # @param key [String] The lookup key
  # @param context [optional Context] The context from which to retrieve
  #   the key.
  #   Defaults to +Context.current+
  # @return [String]
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage.rb#52
  def value(key, context: T.unsafe(nil)); end

  # Returns the baggage
  #
  # @param context [optional Context] The context from which to retrieve
  #   the baggage.
  #   Defaults to +Context.current+
  # @return [Hash]
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage.rb#62
  def values(context: T.unsafe(nil)); end

  private

  # source://opentelemetry-api//lib/opentelemetry/baggage.rb#105
  def baggage_for(context); end
end

# source://opentelemetry-api//lib/opentelemetry/baggage.rb#17
OpenTelemetry::Baggage::BAGGAGE_KEY = T.let(T.unsafe(nil), OpenTelemetry::Context::Key)

# Operational implementation of Baggage::Builder
#
# source://opentelemetry-api//lib/opentelemetry/baggage/builder.rb#10
class OpenTelemetry::Baggage::Builder
  # @api private
  # @return [Builder] a new instance of Builder
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/builder.rb#15
  def initialize(entries); end

  # Clears all baggage from the to-be-created baggage
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/builder.rb#39
  def clear; end

  # @api private
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/builder.rb#12
  def entries; end

  # Removes key from the to-be-created baggage
  #
  # @param key [String] The key to remove
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/builder.rb#34
  def remove_value(key); end

  # Set key-value in the to-be-created baggage
  #
  # @param key [String] The key to store this value under
  # @param value [String] String value to be stored under key
  # @param metadata [optional String] This is here to store properties
  #   received from other W3C Baggage impelmentations but is not exposed in
  #   OpenTelemetry. This is condsidered private API and not for use by
  #   end-users.
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/builder.rb#27
  def set_value(key, value, metadata: T.unsafe(nil)); end
end

# source://opentelemetry-api//lib/opentelemetry/baggage.rb#18
OpenTelemetry::Baggage::EMPTY_BAGGAGE = T.let(T.unsafe(nil), Hash)

# Read-only representation of a baggage entry
#
# source://opentelemetry-api//lib/opentelemetry/baggage/entry.rb#11
class OpenTelemetry::Baggage::Entry
  # @return [Entry] a new instance of Entry
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/entry.rb#14
  def initialize(value, metadata = T.unsafe(nil)); end

  # Returns the value of attribute metadata.
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/entry.rb#12
  def metadata; end

  # Returns the value of attribute value.
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/entry.rb#12
  def value; end
end

# The Baggage::Propagation module contains a text map propagator for
# sending and receiving baggage over the wire.
#
# source://opentelemetry-api//lib/opentelemetry/baggage/propagation/context_keys.rb#9
module OpenTelemetry::Baggage::Propagation
  extend ::OpenTelemetry::Baggage::Propagation

  # Returns a text map propagator that propagates context using the
  # W3C Baggage format.
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/propagation.rb#23
  def text_map_propagator; end
end

# The ContextKeys module contains the keys used to index baggage
# in a {Context} instance
#
# source://opentelemetry-api//lib/opentelemetry/baggage/propagation/context_keys.rb#12
module OpenTelemetry::Baggage::Propagation::ContextKeys
  extend ::OpenTelemetry::Baggage::Propagation::ContextKeys

  # Returns the context key that baggage are indexed by
  #
  # @return [Context::Key]
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/propagation/context_keys.rb#21
  def baggage_key; end
end

# source://opentelemetry-api//lib/opentelemetry/baggage/propagation/context_keys.rb#15
OpenTelemetry::Baggage::Propagation::ContextKeys::BAGGAGE_KEY = T.let(T.unsafe(nil), OpenTelemetry::Context::Key)

# source://opentelemetry-api//lib/opentelemetry/baggage/propagation.rb#17
OpenTelemetry::Baggage::Propagation::TEXT_MAP_PROPAGATOR = T.let(T.unsafe(nil), OpenTelemetry::Baggage::Propagation::TextMapPropagator)

# Propagates baggage using the W3C Baggage format
#
# source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#13
class OpenTelemetry::Baggage::Propagation::TextMapPropagator
  # Extract remote baggage from the supplied carrier.
  # If extraction fails or there is no baggage to extract,
  # then the original context will be returned
  #
  # @param carrier [Carrier] The carrier to get the header from
  # @param context [optional Context] Context to be updated with the baggage
  #   extracted from the carrier. Defaults to +Context.current+.
  # @param getter [optional Getter] If the optional getter is provided, it
  #   will be used to read the header from the carrier, otherwise the default
  #   text map getter will be used.
  # @return [Context] context updated with extracted baggage, or the original context
  #   if extraction fails
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#54
  def extract(carrier, context: T.unsafe(nil), getter: T.unsafe(nil)); end

  # Returns the predefined propagation fields. If your carrier is reused, you
  # should delete the fields returned by this method before calling +inject+.
  #
  # @return [Array<String>] a list of fields that will be used by this propagator.
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#79
  def fields; end

  # Inject in-process baggage into the supplied carrier.
  #
  # @param carrier [Carrier] The mutable carrier to inject baggage into
  # @param context [Context] The context to read baggage from
  # @param setter [optional Setter] If the optional setter is provided, it
  #   will be used to write context into the carrier, otherwise the default
  #   text map setter will be used.
  #
  # source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#31
  def inject(carrier, context: T.unsafe(nil), setter: T.unsafe(nil)); end

  private

  # source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#85
  def encode(baggage); end

  # source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#101
  def encode_value(key, entry); end
end

# source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#19
OpenTelemetry::Baggage::Propagation::TextMapPropagator::BAGGAGE_KEY = T.let(T.unsafe(nil), String)

# source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#20
OpenTelemetry::Baggage::Propagation::TextMapPropagator::FIELDS = T.let(T.unsafe(nil), Array)

# Maximums according to W3C Baggage spec
#
# source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#15
OpenTelemetry::Baggage::Propagation::TextMapPropagator::MAX_ENTRIES = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#16
OpenTelemetry::Baggage::Propagation::TextMapPropagator::MAX_ENTRY_LENGTH = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-api//lib/opentelemetry/baggage/propagation/text_map_propagator.rb#17
OpenTelemetry::Baggage::Propagation::TextMapPropagator::MAX_TOTAL_LENGTH = T.let(T.unsafe(nil), Integer)

# Manages context on a per-fiber basis
#
# source://opentelemetry-api//lib/opentelemetry/context/key.rb#8
class OpenTelemetry::Context
  # @return [Context] a new instance of Context
  #
  # source://opentelemetry-api//lib/opentelemetry/context.rb#131
  def initialize(entries); end

  # Returns the corresponding value (or nil) for key
  #
  # @param key [Key] The lookup key
  # @return [Object]
  #
  # source://opentelemetry-api//lib/opentelemetry/context.rb#139
  def [](key); end

  # Returns a new Context where entries contains the newly added key and value
  #
  # @param key [Key] The key to store this value under
  # @param value [Object] Object to be stored under key
  # @return [Context]
  #
  # source://opentelemetry-api//lib/opentelemetry/context.rb#150
  def set_value(key, value); end

  # Returns a new Context with the current context's entries merged with the
  #   new entries
  #
  # @param values [Hash] The values to be merged with the current context's
  #   entries.
  # @param value [Object] Object to be stored under key
  # @return [Context]
  #
  # source://opentelemetry-api//lib/opentelemetry/context.rb#163
  def set_values(values); end

  # Returns the corresponding value (or nil) for key
  #
  # @param key [Key] The lookup key
  # @return [Object]
  #
  # source://opentelemetry-api//lib/opentelemetry/context.rb#139
  def value(key); end

  class << self
    # Associates a Context with the caller's current Fiber. Every call to
    # this operation should be paired with a corresponding call to detach.
    #
    # Returns a token to be used with the matching call to detach
    #
    # @param context [Context] The new context
    # @return [Object] A token to be used when detaching
    #
    # source://opentelemetry-api//lib/opentelemetry/context.rb#42
    def attach(context); end

    # source://opentelemetry-api//lib/opentelemetry/context.rb#116
    def clear; end

    # Returns a key used to index a value in a Context
    #
    # @param name [String] The key name
    # @return [Context::Key]
    #
    # source://opentelemetry-api//lib/opentelemetry/context.rb#24
    def create_key(name); end

    # Returns current context, which is never nil
    #
    # @return [Context]
    #
    # source://opentelemetry-api//lib/opentelemetry/context.rb#31
    def current; end

    # Restores the previous Context associated with the current Fiber.
    # The supplied token is used to check if the call to detach is balanced
    # with a corresponding attach call. A warning is logged if the
    # calls are unbalanced.
    #
    # @param token [Object] The token provided by the matching call to attach
    # @return [Boolean] True if the calls matched, false otherwise
    #
    # source://opentelemetry-api//lib/opentelemetry/context.rb#55
    def detach(token); end

    # source://opentelemetry-api//lib/opentelemetry/context.rb#120
    def empty; end

    # Returns the value associated with key in the current context
    #
    # @param key [String] The lookup key
    #
    # source://opentelemetry-api//lib/opentelemetry/context.rb#112
    def value(key); end

    # Executes a block with ctx as the current context. It restores
    # the previous context upon exiting.
    #
    # @param ctx [Context] The context to be made active
    # @yield [context] Yields context to the block
    #
    # source://opentelemetry-api//lib/opentelemetry/context.rb#69
    def with_current(ctx); end

    # @param key [String] The lookup key
    # @param value [Object] The object stored under key
    # @param Block [Callable] to execute in a new context
    # @yield [context, value] Yields the newly created context and value to
    #   the block
    #
    # source://opentelemetry-api//lib/opentelemetry/context.rb#84
    def with_value(key, value); end

    # @param key [String] The lookup key
    # @param values [Hash] Will be merged with values of the current context
    #   and returned in a new context
    # @param Block [Callable] to execute in a new context
    # @yield [context, values] Yields the newly created context and values
    #   to the block
    #
    # source://opentelemetry-api//lib/opentelemetry/context.rb#101
    def with_values(values); end

    private

    # source://opentelemetry-api//lib/opentelemetry/context.rb#126
    def stack; end
  end
end

# source://opentelemetry-api//lib/opentelemetry/context.rb#17
class OpenTelemetry::Context::DetachError < ::OpenTelemetry::Error; end

# source://opentelemetry-api//lib/opentelemetry/context.rb#13
OpenTelemetry::Context::EMPTY_ENTRIES = T.let(T.unsafe(nil), Hash)

# The Key class provides mechanisms to index and access values from a
# Context
#
# source://opentelemetry-api//lib/opentelemetry/context/key.rb#11
class OpenTelemetry::Context::Key
  # Use Context.create_key to obtain a Key instance.
  #
  # @api private
  # @return [Key] a new instance of Key
  #
  # source://opentelemetry-api//lib/opentelemetry/context/key.rb#16
  def initialize(name); end

  # Returns the value indexed by this Key in the specified context
  #
  # @param context [optional Context] The Context to lookup the key from.
  #   Defaults to +Context.current+.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/key.rb#24
  def get(context = T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/key.rb#12
  def name; end
end

# The propagation module contains APIs and utilities to interact with context
# and propagate across process boundaries.
#
# The API implicitly defines 3 interfaces: TextMapPropagator, TextMapInjector
# and TextMapExtractor. Concrete implementations of TextMapPropagator are
# provided. Custom text map propagators can leverage these implementations
# or simply implement the expected interface. The interfaces are described
# below.
#
# The TextMapPropagator interface:
#
#    inject(carrier, context:, setter:)
#    extract(carrier, context:, getter:) -> Context
#    fields -> Array<String>
#
# The TextMapInjector interface:
#
#    inject(carrier, context:, setter:)
#    fields -> Array<String>
#
# The TextMapExtractor interface:
#
#    extract(carrier, context:, getter:) -> Context
#
# The API provides 3 TextMapPropagator implementations:
# - A default NoopTextMapPropagator that implements +inject+ and +extract+
#   methods as no-ops. Its +fields+ method returns an empty list.
# - A TextMapPropagator that composes an Injector and an Extractor. Its
#   +fields+ method delegates to the provided Injector.
# - A CompositeTextMapPropagator that wraps either a list of text map
#   propagators or a list of Injectors and a list of Extractors. Its
#   +fields+ method returns the union of fields returned by the Injectors
#   it wraps.
#
# source://opentelemetry-api//lib/opentelemetry/context/propagation/composite_text_map_propagator.rb#9
module OpenTelemetry::Context::Propagation
  extend ::OpenTelemetry::Context::Propagation

  # opentelemetry-common gem instead.
  # Returns a {RackEnvGetter} instance suitable for reading values from a
  # Rack environment.
  #
  # @deprecated Use the rack env getter found in the
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation.rb#74
  def rack_env_getter; end

  # Returns a {TextMapGetter} instance suitable for reading values from a
  # hash-like carrier
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation.rb#60
  def text_map_getter; end

  # Returns a {TextMapSetter} instance suitable for writing values into a
  # hash-like carrier
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation.rb#66
  def text_map_setter; end
end

# A composite text map propagator either composes a list of injectors and a
# list of extractors, or wraps a list of propagators, into a single interface
# exposing inject and extract methods. Injection and extraction will preserve
# the order of the injectors and extractors (or propagators) passed in during
# initialization.
#
# source://opentelemetry-api//lib/opentelemetry/context/propagation/composite_text_map_propagator.rb#15
class OpenTelemetry::Context::Propagation::CompositeTextMapPropagator
  # @api private
  # @return [CompositeTextMapPropagator] a new instance of CompositeTextMapPropagator
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/composite_text_map_propagator.rb#44
  def initialize(injectors: T.unsafe(nil), extractors: T.unsafe(nil), propagators: T.unsafe(nil)); end

  # Runs extractors or propagators in order and returns a Context updated
  # with the results of each extraction. If an extraction fails, a warning
  # will be logged and remaining extractors will continue to be executed. Always
  # returns a valid context.
  #
  # @param carrier [Object] The carrier to extract context from.
  # @param context [optional Context] Context to be updated with the state
  #   extracted from the carrier. Defaults to +Context.current+.
  # @param getter [optional Getter] If the optional getter is provided, it
  #   will be used to read the header from the carrier, otherwise the default
  #   getter will be used.
  # @return [Context] a new context updated with state extracted from the
  #   carrier
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/composite_text_map_propagator.rb#83
  def extract(carrier, context: T.unsafe(nil), getter: T.unsafe(nil)); end

  # Returns the union of the propagation fields returned by the composed injectors
  # or propagators. If your carrier is reused, you should delete the fields returned
  # by this method before calling +inject+.
  #
  # @return [Array<String>] a list of fields that will be used by this propagator.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/composite_text_map_propagator.rb#98
  def fields; end

  # Runs injectors or propagators in order. If an injection fails
  # a warning will be logged and remaining injectors will be executed.
  #
  # @param carrier [Object] A mutable carrier to inject context into.
  # @param context [optional Context] Context to be injected into carrier. Defaults
  #   to +Context.current+.
  # @param setter [optional Setter] If the optional setter is provided, it
  #   will be used to write context into the carrier, otherwise the default
  #   setter will be used.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/composite_text_map_propagator.rb#59
  def inject(carrier, context: T.unsafe(nil), setter: T.unsafe(nil)); end

  class << self
    # Returns a Propagator that extracts using the provided extractors
    # and injectors.
    #
    # @param injectors [Array<#inject, #fields>] An array of text map injectors
    # @param extractors [Array<#extract>] An array of text map extractors
    # @raise [ArgumentError]
    #
    # source://opentelemetry-api//lib/opentelemetry/context/propagation/composite_text_map_propagator.rb#24
    def compose(injectors:, extractors:); end

    # Returns a Propagator that extracts using the provided propagators.
    #
    # @param propagators [Array<#inject, #extract, #fields>] An array of
    #   text map propagators
    # @raise [ArgumentError]
    #
    # source://opentelemetry-api//lib/opentelemetry/context/propagation/composite_text_map_propagator.rb#34
    def compose_propagators(propagators); end

    private

    def new(*_arg0); end
  end
end

# @api private
#
# source://opentelemetry-api//lib/opentelemetry/context/propagation/noop_text_map_propagator.rb#11
class OpenTelemetry::Context::Propagation::NoopTextMapPropagator
  # @api private
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/noop_text_map_propagator.rb#17
  def extract(carrier, context: T.unsafe(nil), getter: T.unsafe(nil)); end

  # @api private
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/noop_text_map_propagator.rb#21
  def fields; end

  # @api private
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/noop_text_map_propagator.rb#15
  def inject(carrier, context: T.unsafe(nil), setter: T.unsafe(nil)); end
end

# @api private
#
# source://opentelemetry-api//lib/opentelemetry/context/propagation/noop_text_map_propagator.rb#12
OpenTelemetry::Context::Propagation::NoopTextMapPropagator::EMPTY_LIST = T.let(T.unsafe(nil), Array)

# source://opentelemetry-api//lib/opentelemetry/context/propagation.rb#54
OpenTelemetry::Context::Propagation::RACK_ENV_GETTER = T.let(T.unsafe(nil), OpenTelemetry::Context::Propagation::RackEnvGetter)

# The RackEnvGetter class provides a common methods for reading
# keys from a rack environment. It abstracts away the rack-normalization
# process so that keys can be looked up without having to transform them
# first. With this class you can get +traceparent+ instead of
# +HTTP_TRACEPARENT+
#
# source://opentelemetry-api//lib/opentelemetry/context/propagation/rack_env_getter.rb#18
class OpenTelemetry::Context::Propagation::RackEnvGetter
  # Converts key into a rack-normalized key and reads it from the carrier.
  # Useful for extract operations.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/rack_env_getter.rb#21
  def get(carrier, key); end

  # Reads all keys from a carrier and converts them from the rack-normalized
  # form to the original. The resulting keys will be lowercase and
  # underscores will be replaced with dashes.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/rack_env_getter.rb#28
  def keys(carrier); end

  private

  # source://opentelemetry-api//lib/opentelemetry/context/propagation/rack_env_getter.rb#41
  def from_rack_key(key); end

  # source://opentelemetry-api//lib/opentelemetry/context/propagation/rack_env_getter.rb#34
  def to_rack_key(key); end
end

# source://opentelemetry-api//lib/opentelemetry/context/propagation.rb#52
OpenTelemetry::Context::Propagation::TEXT_MAP_GETTER = T.let(T.unsafe(nil), OpenTelemetry::Context::Propagation::TextMapGetter)

# source://opentelemetry-api//lib/opentelemetry/context/propagation.rb#53
OpenTelemetry::Context::Propagation::TEXT_MAP_SETTER = T.let(T.unsafe(nil), OpenTelemetry::Context::Propagation::TextMapSetter)

# The default getter module provides a common methods for reading
# key from a carrier that implements +[]+ and a +keys+ method
#
# source://opentelemetry-api//lib/opentelemetry/context/propagation/text_map_getter.rb#12
class OpenTelemetry::Context::Propagation::TextMapGetter
  # Reads a key from a carrier that implements +[]+. Useful for extract
  # operations.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/text_map_getter.rb#15
  def get(carrier, key); end

  # Reads all keys from a carrier. Useful for iterating over a carrier's
  # keys.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/text_map_getter.rb#21
  def keys(carrier); end
end

# A text map propagator that composes an extractor and injector into a
# single interface exposing inject and extract methods.
#
# source://opentelemetry-api//lib/opentelemetry/context/propagation/text_map_propagator.rb#12
class OpenTelemetry::Context::Propagation::TextMapPropagator
  # Returns a Propagator that delegates inject and extract to the provided
  # injector and extractor
  #
  # @param injector [#inject]
  # @param extractor [#extract]
  # @raise [ArgumentError]
  # @return [TextMapPropagator] a new instance of TextMapPropagator
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/text_map_propagator.rb#18
  def initialize(injector, extractor); end

  # Extracts and returns context from a carrier. Returns the provided
  # context and logs a warning if an error if extraction fails.
  #
  # @param carrier [Object] The carrier to extract context from.
  # @param context [optional Context] Context to be updated with the state
  #   extracted from the carrier. Defaults to +Context.current+.
  # @param getter [optional Getter] If the optional getter is provided, it
  #   will be used to read the header from the carrier, otherwise the default
  #   getter will be used.
  # @return [Context] a new context updated with state extracted from the
  #   carrier
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/text_map_propagator.rb#54
  def extract(carrier, context: T.unsafe(nil), getter: T.unsafe(nil)); end

  # Returns the predefined propagation fields. If your carrier is reused, you
  # should delete the fields returned by this method before calling +inject+.
  #
  # @return [Array<String>] a list of fields that will be used by this propagator.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/text_map_propagator.rb#65
  def fields; end

  # Injects the provided context into a carrier using the underlying
  # injector. Logs a warning if injection fails.
  #
  # @param carrier [Object] A mutable carrier to inject context into.
  # @param context [optional Context] Context to be injected into carrier. Defaults
  #   to +Context.current+.
  # @param setter [optional Setter] If the optional setter is provided, it
  #   will be used to write context into the carrier, otherwise the default
  #   setter will be used.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/text_map_propagator.rb#34
  def inject(carrier, context: T.unsafe(nil), setter: T.unsafe(nil)); end
end

# The default setter module provides a common method for writing
# a key into a carrier that implements +[]=+
#
# source://opentelemetry-api//lib/opentelemetry/context/propagation/text_map_setter.rb#12
class OpenTelemetry::Context::Propagation::TextMapSetter
  # Writes key into a carrier that implements +[]=+. Useful for inject
  # operations.
  #
  # source://opentelemetry-api//lib/opentelemetry/context/propagation/text_map_setter.rb#15
  def set(carrier, key, value); end
end

# source://opentelemetry-api//lib/opentelemetry/context.rb#167
OpenTelemetry::Context::ROOT = T.let(T.unsafe(nil), OpenTelemetry::Context)

# source://opentelemetry-api//lib/opentelemetry/context.rb#14
OpenTelemetry::Context::STACK_KEY = T.let(T.unsafe(nil), Symbol)

# source://opentelemetry-api//lib/opentelemetry/error.rb#7
class OpenTelemetry::Error < ::StandardError; end

# The Internal module provides API internal functionality that is not a part of the
# public API.
#
# @api private
#
# source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer.rb#8
module OpenTelemetry::Internal; end

# {ProxyTracer} is an implementation of {OpenTelemetry::Trace::Tracer}. It is returned from
# the ProxyTracerProvider until a delegate tracer provider is installed. After the delegate
# tracer provider is installed, the ProxyTracer will delegate to the corresponding "real"
# tracer.
#
# @api private
#
# source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer.rb#15
class OpenTelemetry::Internal::ProxyTracer < ::OpenTelemetry::Trace::Tracer
  # Returns a new {ProxyTracer} instance.
  #
  # @api private
  # @return [ProxyTracer]
  #
  # source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer.rb#21
  def initialize; end

  # @api private
  #
  # source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer.rb#16
  def delegate=(_arg0); end

  # @api private
  #
  # source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer.rb#25
  def start_root_span(name, attributes: T.unsafe(nil), links: T.unsafe(nil), start_timestamp: T.unsafe(nil), kind: T.unsafe(nil)); end

  # @api private
  #
  # source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer.rb#31
  def start_span(name, with_parent: T.unsafe(nil), attributes: T.unsafe(nil), links: T.unsafe(nil), start_timestamp: T.unsafe(nil), kind: T.unsafe(nil)); end
end

# {ProxyTracerProvider} is an implementation of {OpenTelemetry::Trace::TracerProvider}.
# It is the default global tracer provider returned by OpenTelemetry.tracer_provider.
# It delegates to a "real" TracerProvider after the global tracer provider is registered.
# It returns {ProxyTracer} instances until the delegate is installed.
#
# @api private
#
# source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer_provider.rb#15
class OpenTelemetry::Internal::ProxyTracerProvider < ::OpenTelemetry::Trace::TracerProvider
  # Returns a new {ProxyTracerProvider} instance.
  #
  # @api private
  # @return [ProxyTracerProvider]
  #
  # source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer_provider.rb#22
  def initialize; end

  # Set the delegate tracer provider. If this is called more than once, a warning will
  # be logged and superfluous calls will be ignored.
  #
  # @api private
  # @param provider [TracerProvider] The tracer provider to delegate to
  #
  # source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer_provider.rb#32
  def delegate=(provider); end

  # Returns a {Tracer} instance.
  #
  # @api private
  # @param name [optional String] Instrumentation package name
  # @param version [optional String] Instrumentation package version
  # @return [Tracer]
  #
  # source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer_provider.rb#50
  def tracer(name = T.unsafe(nil), version = T.unsafe(nil)); end
end

# @api private
#
# source://opentelemetry-api//lib/opentelemetry/internal/proxy_tracer_provider.rb#16
class OpenTelemetry::Internal::ProxyTracerProvider::Key < ::Struct
  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute version
  #
  # @return [Object] the current value of version
  def version; end

  # Sets the attribute version
  #
  # @param value [Object] the value to set the attribute version to.
  # @return [Object] the newly set value
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# The Trace API allows recording a set of events, triggered as a result of a
# single logical operation, consolidated across various components of an
# application.
#
# source://opentelemetry-api//lib/opentelemetry/trace.rb#11
module OpenTelemetry::Trace
  extend ::OpenTelemetry::Trace

  # Returns a context containing the span, derived from the optional parent
  # context, or the current context if one was not provided.
  #
  # @param context [optional Context] The context to use as the parent for
  #   the returned context
  #
  # source://opentelemetry-api//lib/opentelemetry/trace.rb#60
  def context_with_span(span, parent_context: T.unsafe(nil)); end

  # Returns the current span from the current or provided context
  #
  # @param context [optional Context] The context to lookup the current
  #   {Span} from. Defaults to Context.current
  #
  # source://opentelemetry-api//lib/opentelemetry/trace.rb#50
  def current_span(context = T.unsafe(nil)); end

  # Generates a valid span identifier, an 8-byte string with at least one
  # non-zero byte.
  #
  # @return [String] a valid span ID.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace.rb#39
  def generate_span_id; end

  # Generates a valid trace identifier, a 16-byte string with at least one
  # non-zero byte.
  #
  # @return [String] a valid trace ID.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace.rb#28
  def generate_trace_id; end

  # Wraps a SpanContext with an object implementing the Span interface. This is done in order
  # to expose a SpanContext as a Span in operations such as in-process Span propagation.
  #
  # @param span_context [SpanContext] SpanContext to be wrapped
  # @return [Span]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace.rb#81
  def non_recording_span(span_context); end

  # Activates/deactivates the Span within the current Context, which makes the "current span"
  # available implicitly.
  #
  # On exit, the Span that was active before calling this method will be reactivated.
  #
  # @param span [Span] the span to activate
  # @yield [span, context] yields span and a context containing the span to the block.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace.rb#71
  def with_span(span); end
end

# source://opentelemetry-api//lib/opentelemetry/trace.rb#14
OpenTelemetry::Trace::CURRENT_SPAN_KEY = T.let(T.unsafe(nil), OpenTelemetry::Context::Key)

# An invalid span identifier, an 8-byte string with all zero bytes.
#
# source://opentelemetry-api//lib/opentelemetry/trace.rb#22
OpenTelemetry::Trace::INVALID_SPAN_ID = T.let(T.unsafe(nil), String)

# An invalid trace identifier, a 16-byte string with all zero bytes.
#
# source://opentelemetry-api//lib/opentelemetry/trace.rb#19
OpenTelemetry::Trace::INVALID_TRACE_ID = T.let(T.unsafe(nil), String)

# A link to a {Span}. Used (for example) in batching operations, where a
# single batch handler processes multiple requests from different traces.
# A Link can be also used to reference spans from the same trace. A Link
# and its attributes are immutable.
#
# source://opentelemetry-api//lib/opentelemetry/trace/link.rb#13
class OpenTelemetry::Trace::Link
  # Returns a new immutable {Link}.
  #
  # @param span_context [SpanContext] The context of the linked {Span}.
  # @param attributes [optional Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}] A hash of attributes for this link. Attributes will be
  #   frozen during Link initialization.
  # @return [Link]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/link.rb#35
  def initialize(span_context, attributes = T.unsafe(nil)); end

  # Returns true if two {Link}s are equal.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/link.rb#41
  def ==(other); end

  # Returns the frozen attributes for this link.
  #
  # @return [Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/link.rb#26
  def attributes; end

  # Returns the {SpanContext} for this link
  #
  # @return [SpanContext]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/link.rb#21
  def span_context; end
end

# source://opentelemetry-api//lib/opentelemetry/trace/link.rb#14
OpenTelemetry::Trace::Link::EMPTY_ATTRIBUTES = T.let(T.unsafe(nil), Hash)

# The Trace::Propagation module contains injectors and extractors for
# sending and receiving span context over the wire
#
# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#8
module OpenTelemetry::Trace::Propagation; end

# The TraceContext module contains injectors, extractors, and utilties
# for context propagation in the W3C Trace Context format.
#
# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#9
module OpenTelemetry::Trace::Propagation::TraceContext
  extend ::OpenTelemetry::Trace::Propagation::TraceContext

  # Returns a text map propagator that propagates context using the
  # W3C Trace Context format.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context.rb#23
  def text_map_propagator; end
end

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context.rb#17
OpenTelemetry::Trace::Propagation::TraceContext::TEXT_MAP_PROPAGATOR = T.let(T.unsafe(nil), OpenTelemetry::Trace::Propagation::TraceContext::TextMapPropagator)

# Propagates trace context using the W3C Trace Context format
#
# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/text_map_propagator.rb#12
class OpenTelemetry::Trace::Propagation::TraceContext::TextMapPropagator
  # Extract trace context from the supplied carrier.
  # If extraction fails, the original context will be returned
  #
  # @param carrier [Carrier] The carrier to get the header from
  # @param context [optional Context] Context to be updated with the trace context
  #   extracted from the carrier. Defaults to +Context.current+.
  # @param getter [optional Getter] If the optional getter is provided, it
  #   will be used to read the header from the carrier, otherwise the default
  #   text map getter will be used.
  # @return [Context] context updated with extracted baggage, or the original context
  #   if extraction fails
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/text_map_propagator.rb#47
  def extract(carrier, context: T.unsafe(nil), getter: T.unsafe(nil)); end

  # Returns the predefined propagation fields. If your carrier is reused, you
  # should delete the fields returned by this method before calling +inject+.
  #
  # @return [Array<String>] a list of fields that will be used by this propagator.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/text_map_propagator.rb#69
  def fields; end

  # Inject trace context into the supplied carrier.
  #
  # @param carrier [Carrier] The mutable carrier to inject trace context into
  # @param context [Context] The context to read trace context from
  # @param setter [optional Setter] If the optional setter is provided, it
  #   will be used to write context into the carrier, otherwise the default
  #   text map setter will be used.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/text_map_propagator.rb#26
  def inject(carrier, context: T.unsafe(nil), setter: T.unsafe(nil)); end
end

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/text_map_propagator.rb#15
OpenTelemetry::Trace::Propagation::TraceContext::TextMapPropagator::FIELDS = T.let(T.unsafe(nil), Array)

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/text_map_propagator.rb#13
OpenTelemetry::Trace::Propagation::TraceContext::TextMapPropagator::TRACEPARENT_KEY = T.let(T.unsafe(nil), String)

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/text_map_propagator.rb#14
OpenTelemetry::Trace::Propagation::TraceContext::TextMapPropagator::TRACESTATE_KEY = T.let(T.unsafe(nil), String)

# A TraceParent is an implementation of the W3C trace context specification
# https://www.w3.org/TR/trace-context/
# {Trace::SpanContext}
#
# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#13
class OpenTelemetry::Trace::Propagation::TraceContext::TraceParent
  # @return [TraceParent] a new instance of TraceParent
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#120
  def initialize(trace_id: T.unsafe(nil), span_id: T.unsafe(nil), version: T.unsafe(nil), flags: T.unsafe(nil)); end

  # Returns the value of attribute flags.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#96
  def flags; end

  # Returns the sampling choice from the trace_flags
  #
  # @return [Boolean] the sampling choice
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#102
  def sampled?; end

  # Returns the value of attribute span_id.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#96
  def span_id; end

  # converts this object into a string according to the w3c spec
  #
  # @return [String] the serialized trace_parent
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#108
  def to_s; end

  # Returns the value of attribute trace_id.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#96
  def trace_id; end

  # Returns the value of attribute version.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#96
  def version; end

  private

  # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#114
  def flag_string; end

  class << self
    # Creates a new {TraceParent} from a supplied {Trace::SpanContext}
    #
    # @param ctx [SpanContext] The span context
    # @return [TraceParent] a trace parent
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#36
    def from_span_context(ctx); end

    # Deserializes the {TraceParent} from the string representation
    #
    # @param string [String] The serialized trace parent
    # @raise [InvalidFormatError] on an invalid format
    # @raise [InvalidVerionError] on an invalid version
    # @raise [InvalidTraceIDError] on an invalid trace_id
    # @raise [InvalidSpanIDError] on an invalid span_id
    # @return [TraceParent] a trace_parent
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#47
    def from_string(string); end

    private

    # @raise [InvalidFormatError]
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#62
    def match_input(string); end

    def new(*_arg0); end

    # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#91
    def parse_flags(string); end

    # @raise [InvalidSpanIDError]
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#84
    def parse_span_id(string); end

    # @raise [InvalidTraceIDError]
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#77
    def parse_trace_id(string); end

    # @raise [InvalidFormatError]
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#69
    def parse_version(string); end
  end
end

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#29
OpenTelemetry::Trace::Propagation::TraceContext::TraceParent::INVALID_SPAN_ID = T.let(T.unsafe(nil), String)

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#28
OpenTelemetry::Trace::Propagation::TraceContext::TraceParent::INVALID_TRACE_ID = T.let(T.unsafe(nil), String)

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#14
class OpenTelemetry::Trace::Propagation::TraceContext::TraceParent::InvalidFormatError < ::OpenTelemetry::Error; end

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#17
class OpenTelemetry::Trace::Propagation::TraceContext::TraceParent::InvalidSpanIDError < ::OpenTelemetry::Error; end

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#16
class OpenTelemetry::Trace::Propagation::TraceContext::TraceParent::InvalidTraceIDError < ::OpenTelemetry::Error; end

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#15
class OpenTelemetry::Trace::Propagation::TraceContext::TraceParent::InvalidVersionError < ::OpenTelemetry::Error; end

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#22
OpenTelemetry::Trace::Propagation::TraceContext::TraceParent::MAX_VERSION = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#25
OpenTelemetry::Trace::Propagation::TraceContext::TraceParent::REGEXP = T.let(T.unsafe(nil), Regexp)

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#20
OpenTelemetry::Trace::Propagation::TraceContext::TraceParent::SUPPORTED_VERSION = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-api//lib/opentelemetry/trace/propagation/trace_context/trace_parent.rb#19
OpenTelemetry::Trace::Propagation::TraceContext::TraceParent::TRACE_PARENT_HEADER = T.let(T.unsafe(nil), String)

# Span represents a single operation within a trace. Spans can be nested to
# form a trace tree. Often, a trace contains a root span that describes the
# end-to-end latency and, optionally, one or more sub-spans for its
# sub-operations.
#
# Once Span {Tracer#start_span is created} - Span operations can be used to
# add additional properties to it like attributes, links, events, name and
# resulting status. Span cannot be used to retrieve these properties. This
# prevents the mis-use of spans as an in-process information propagation
# mechanism.
#
# {Span} must be ended by calling {#finish}.
#
# source://opentelemetry-api//lib/opentelemetry/trace/span.rb#21
class OpenTelemetry::Trace::Span
  # Spans must be created using {Tracer}. This is for internal use only.
  #
  # @api private
  # @return [Span] a new instance of Span
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#32
  def initialize(span_context: T.unsafe(nil)); end

  # Set attribute
  #
  # Note that the OpenTelemetry project
  # {https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md
  # documents} certain "standard attributes" that have prescribed semantic
  # meanings.
  #
  # @param key [String]
  # @param value [String, Boolean, Numeric, Array<String, Numeric, Boolean>] Values must be non-nil and (array of) string, boolean or numeric type.
  #   Array values must not contain nil elements and all elements must be of
  #   the same basic type (string, numeric, boolean).
  # @return [self] returns itself
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#59
  def []=(key, value); end

  # Add attributes
  #
  # Note that the OpenTelemetry project
  # {https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md
  # documents} certain "standard attributes" that have prescribed semantic
  # meanings.
  #
  # @param attributes [Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}] Values must be non-nil and (array of) string, boolean or numeric type.
  #   Array values must not contain nil elements and all elements must be of
  #   the same basic type (string, numeric, boolean).
  # @return [self] returns itself
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#77
  def add_attributes(attributes); end

  # Add an event to a {Span}.
  #
  # Example:
  #
  #   span.add_event('event', attributes: {'eager' => true})
  #
  # Note that the OpenTelemetry project
  # {https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md
  # documents} certain "standard event names and keys" which have
  # prescribed semantic meanings.
  #
  # @param name [String] Name of the event.
  # @param attributes [optional Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}] One or more key:value pairs, where the keys must be
  #   strings and the values may be (array of) string, boolean or numeric
  #   type.
  # @param timestamp [optional Time] Optional timestamp for the event.
  # @return [self] returns itself
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#100
  def add_event(name, attributes: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # Retrieve the spans SpanContext
  #
  # The returned value may be used even after the Span is finished.
  #
  # @return [SpanContext]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#27
  def context; end

  # Finishes the Span
  #
  # Implementations MUST ignore all subsequent calls to {#finish} (there
  # might be exceptions when Tracer is streaming event and has no mutable
  # state associated with the Span).
  #
  # Call to {#finish} MUST not have any effects on child spans. Those may
  # still be running and can be ended later.
  #
  # This API MUST be non-blocking.
  #
  # @param end_timestamp [Time] optional end timestamp for the span.
  # @return [self] returns itself
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#154
  def finish(end_timestamp: T.unsafe(nil)); end

  # Updates the Span name
  #
  # Upon this update, any sampling behavior based on Span name will depend
  # on the implementation.
  #
  # @param new_name [String] The new operation name, which supersedes
  #   whatever was passed in when the Span was started
  # @return [void]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#138
  def name=(new_name); end

  # Record an exception during the execution of this span. Multiple exceptions
  # can be recorded on a span.
  #
  # @param exception [Exception] The exception to recorded
  # @param attributes [optional Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}] One or more key:value pairs, where the keys must be
  #   strings and the values may be (array of) string, boolean or numeric
  #   type.
  # @return [void]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#114
  def record_exception(exception, attributes: T.unsafe(nil)); end

  # Return whether this span is recording.
  #
  # @return [Boolean] true if this Span is active and recording information
  #   like events with the #add_event operation and attributes using
  #   #set_attribute.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#41
  def recording?; end

  # Set attribute
  #
  # Note that the OpenTelemetry project
  # {https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md
  # documents} certain "standard attributes" that have prescribed semantic
  # meanings.
  #
  # @param key [String]
  # @param value [String, Boolean, Numeric, Array<String, Numeric, Boolean>] Values must be non-nil and (array of) string, boolean or numeric type.
  #   Array values must not contain nil elements and all elements must be of
  #   the same basic type (string, numeric, boolean).
  # @return [self] returns itself
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#59
  def set_attribute(key, value); end

  # Sets the Status to the Span
  #
  # If used, this will override the default Span status. Default is OK.
  #
  # Only the value of the last call will be recorded, and implementations
  # are free to ignore previous calls.
  #
  # @param status [Status] The new status, which overrides the default Span
  #   status, which is OK.
  # @return [void]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span.rb#127
  def status=(status); end
end

# source://opentelemetry-api//lib/opentelemetry/trace/span.rb#158
OpenTelemetry::Trace::Span::INVALID = T.let(T.unsafe(nil), OpenTelemetry::Trace::Span)

# A SpanContext contains the state that must propagate to child {Span}s and across process boundaries.
# It contains the identifiers (a trace ID and span ID) associated with the {Span}, a set of
# {TraceFlags}, a system-specific tracestate, and a boolean indicating that the SpanContext was
# extracted from the wire.
#
# source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#13
class OpenTelemetry::Trace::SpanContext
  # Returns a new {SpanContext}.
  #
  # @param trace_id [optional String] The trace ID associated with a {Span}.
  # @param span_id [optional String] The span ID associated with a {Span}.
  # @param trace_flags [optional TraceFlags] The trace flags associated with a {Span}.
  # @param tracestate [optional Tracestate] The tracestate associated with a {Span}. May be nil.
  # @param remote [optional Boolean] Whether the {SpanContext} was extracted from the wire.
  # @return [SpanContext]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#24
  def initialize(trace_id: T.unsafe(nil), span_id: T.unsafe(nil), trace_flags: T.unsafe(nil), tracestate: T.unsafe(nil), remote: T.unsafe(nil)); end

  # Returns the lowercase [hex encoded](https://tools.ietf.org/html/rfc4648#section-8) span ID.
  #
  # @return [String] A 16-hex-character lowercase string.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#48
  def hex_span_id; end

  # Returns the lowercase [hex encoded](https://tools.ietf.org/html/rfc4648#section-8) trace ID.
  #
  # @return [String] A 32-hex-character lowercase string.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#41
  def hex_trace_id; end

  # Returns true if the {SpanContext} was propagated from a remote parent.
  #
  # @return [Boolean]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#72
  def remote?; end

  # Returns the binary representation of the span ID.
  #
  # @return [String] An 8-byte binary string.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#60
  def span_id; end

  # Returns the value of attribute trace_flags.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#14
  def trace_flags; end

  # Returns the binary representation of the trace ID.
  #
  # @return [String] A 16-byte binary string.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#55
  def trace_id; end

  # Returns the value of attribute tracestate.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#14
  def tracestate; end

  # Returns true if the {SpanContext} has a non-zero trace ID and non-zero span ID.
  #
  # @return [Boolean]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#65
  def valid?; end
end

# Represents an invalid {SpanContext}, with an invalid trace ID and an invalid span ID.
#
# source://opentelemetry-api//lib/opentelemetry/trace/span_context.rb#77
OpenTelemetry::Trace::SpanContext::INVALID = T.let(T.unsafe(nil), OpenTelemetry::Trace::SpanContext)

# Type of span. Can be used to specify additional relationships between spans in addition to a
# parent/child relationship. For API ergonomics, use of the symbols rather than the constants
# may be preferred. For example:
#
#   span = tracer.start_span('op', kind: :client)
#
# source://opentelemetry-api//lib/opentelemetry/trace/span_kind.rb#14
module OpenTelemetry::Trace::SpanKind; end

# Indicates that the span covers the client-side wrapper around an RPC or other remote request.
#
# source://opentelemetry-api//lib/opentelemetry/trace/span_kind.rb#22
OpenTelemetry::Trace::SpanKind::CLIENT = T.let(T.unsafe(nil), Symbol)

# Indicates that the span describes consumer recieving a message from a broker. Unlike client
# and server, there is no direct critical path latency relationship between producer and
# consumer spans.
#
# source://opentelemetry-api//lib/opentelemetry/trace/span_kind.rb#32
OpenTelemetry::Trace::SpanKind::CONSUMER = T.let(T.unsafe(nil), Symbol)

# Default value. Indicates that the span is used internally.
#
# source://opentelemetry-api//lib/opentelemetry/trace/span_kind.rb#16
OpenTelemetry::Trace::SpanKind::INTERNAL = T.let(T.unsafe(nil), Symbol)

# Indicates that the span describes producer sending a message to a broker. Unlike client and
# server, there is no direct critical path latency relationship between producer and consumer
# spans.
#
# source://opentelemetry-api//lib/opentelemetry/trace/span_kind.rb#27
OpenTelemetry::Trace::SpanKind::PRODUCER = T.let(T.unsafe(nil), Symbol)

# Indicates that the span covers server-side handling of an RPC or other remote request.
#
# source://opentelemetry-api//lib/opentelemetry/trace/span_kind.rb#19
OpenTelemetry::Trace::SpanKind::SERVER = T.let(T.unsafe(nil), Symbol)

# Status represents the status of a finished {Span}. It is composed of a
# status code in conjunction with an optional descriptive message.
#
# source://opentelemetry-api//lib/opentelemetry/trace/status.rb#11
class OpenTelemetry::Trace::Status
  # The constructor is private and only for use internally by the class.
  # Users should use the {unset}, {error}, or {ok} factory methods to
  # obtain a {Status} instance.
  #
  # @api private
  # @param code [Integer] One of the status codes below
  # @param description [String]
  # @return [Status] a new instance of Status
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/status.rb#60
  def initialize(code, description: T.unsafe(nil)); end

  # Retrieve the status code of this Status.
  #
  # @return [Integer]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/status.rb#46
  def code; end

  # Retrieve the description of this Status.
  #
  # @return [String]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/status.rb#51
  def description; end

  # Returns false if this {Status} represents an error, else returns true.
  #
  # @return [Boolean]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/status.rb#68
  def ok?; end

  class << self
    # Returns a newly created {Status} with code == ERROR and an optional
    # description.
    #
    # @param description [String]
    # @return [Status]
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/status.rb#38
    def error(description = T.unsafe(nil)); end

    # Returns a newly created {Status} with code == OK and an optional
    # description.
    #
    # @param description [String]
    # @return [Status]
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/status.rb#29
    def ok(description = T.unsafe(nil)); end

    # Returns a newly created {Status} with code == UNSET and an optional
    # description.
    #
    # @param description [String]
    # @return [Status]
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/status.rb#20
    def unset(description = T.unsafe(nil)); end

    private

    def new(*_arg0); end
  end
end

# An error.
#
# source://opentelemetry-api//lib/opentelemetry/trace/status.rb#82
OpenTelemetry::Trace::Status::ERROR = T.let(T.unsafe(nil), Integer)

# The operation completed successfully.
#
# source://opentelemetry-api//lib/opentelemetry/trace/status.rb#76
OpenTelemetry::Trace::Status::OK = T.let(T.unsafe(nil), Integer)

# The default status.
#
# source://opentelemetry-api//lib/opentelemetry/trace/status.rb#79
OpenTelemetry::Trace::Status::UNSET = T.let(T.unsafe(nil), Integer)

# TraceFlags contain details about the trace. Unlike Tracestate values,
# TraceFlags are present in all traces. Currently, the only TraceFlag is a
# boolean {sampled?} {https://www.w3.org/TR/trace-context/#trace-flags flag}.
#
# source://opentelemetry-api//lib/opentelemetry/trace/trace_flags.rb#12
class OpenTelemetry::Trace::TraceFlags
  # The constructor is private and only for use internally by the class.
  # Users should use the {from_byte} factory method to obtain a {TraceFlags}
  # instance.
  #
  # @api private
  # @param flags [Integer] 8-bit byte of bit flags
  # @return [TraceFlags]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/trace_flags.rb#34
  def initialize(flags); end

  # Returns whether the caller may have recorded trace data. When false,
  # the caller did not record trace data out-of-band.
  #
  # @return [Boolean]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/trace_flags.rb#42
  def sampled?; end

  class << self
    # Returns a newly created {TraceFlags} with the specified flags.
    #
    # @param flags [Integer] 8-bit byte of bit flags
    # @return [TraceFlags]
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/trace_flags.rb#20
    def from_byte(flags); end

    private

    def new(*_arg0); end
  end
end

# source://opentelemetry-api//lib/opentelemetry/trace/trace_flags.rb#46
OpenTelemetry::Trace::TraceFlags::DEFAULT = T.let(T.unsafe(nil), OpenTelemetry::Trace::TraceFlags)

# source://opentelemetry-api//lib/opentelemetry/trace/trace_flags.rb#47
OpenTelemetry::Trace::TraceFlags::SAMPLED = T.let(T.unsafe(nil), OpenTelemetry::Trace::TraceFlags)

# No-op implementation of Tracer.
#
# source://opentelemetry-api//lib/opentelemetry/trace/tracer.rb#10
class OpenTelemetry::Trace::Tracer
  # This is a helper for the default use-case of extending the current trace with a span.
  #
  # With this helper:
  #
  #   OpenTelemetry.tracer.in_span('do-the-thing') do ... end
  #
  # Equivalent without helper:
  #
  #   OpenTelemetry::Trace.with_span(tracer.start_span('do-the-thing')) do ... end
  #
  # On exit, the Span that was active before calling this method will be reactivated. If an
  # exception occurs during the execution of the provided block, it will be recorded on the
  # span and reraised.
  #
  # @yield [span, context] yields the newly created span and a context containing the
  #   span to the block.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracer.rb#26
  def in_span(name, attributes: T.unsafe(nil), links: T.unsafe(nil), start_timestamp: T.unsafe(nil), kind: T.unsafe(nil), &block); end

  # source://opentelemetry-api//lib/opentelemetry/trace/tracer.rb#38
  def start_root_span(name, attributes: T.unsafe(nil), links: T.unsafe(nil), start_timestamp: T.unsafe(nil), kind: T.unsafe(nil)); end

  # Used when a caller wants to manage the activation/deactivation and lifecycle of
  # the Span and its parent manually.
  #
  # Parent context can be either passed explicitly, or inferred from currently activated span.
  #
  # @param with_parent [optional Context] Explicitly managed parent context
  # @return [Span]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracer.rb#50
  def start_span(name, with_parent: T.unsafe(nil), attributes: T.unsafe(nil), links: T.unsafe(nil), start_timestamp: T.unsafe(nil), kind: T.unsafe(nil)); end
end

# No-op implementation of a tracer provider.
#
# source://opentelemetry-api//lib/opentelemetry/trace/tracer_provider.rb#10
class OpenTelemetry::Trace::TracerProvider
  # Returns a {Tracer} instance.
  #
  # @param name [optional String] Instrumentation package name
  # @param version [optional String] Instrumentation package version
  # @return [Tracer]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracer_provider.rb#17
  def tracer(name = T.unsafe(nil), version = T.unsafe(nil)); end
end

# Tracestate is a part of SpanContext, represented by an immutable list of
# string key/value pairs and formally defined by the W3C Trace Context
# specification https://www.w3.org/TR/trace-context/
#
# source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#12
class OpenTelemetry::Trace::Tracestate
  # The constructor is private and only for use internally by the class.
  # Users should use the {from_hash} or {from_string} factory methods to
  # obtain a {Tracestate} instance.
  #
  # @api private
  # @param hash [Hash<String, String>] Key-value pairs
  # @return [Tracestate]
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#76
  def initialize(hash); end

  # Returns true if this Tracestate equals other.
  #
  # @param other [Tracestate] The Tracestate for comparison.
  # @return [Boolean] true if this Tracestate == other, else false.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#154
  def ==(other); end

  # Returns the value associated with the given key, or nil if the key
  # is not present.
  #
  # @param key [String] The key to lookup.
  # @return [String] The value associated with the key, or nil.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#87
  def [](key); end

  # Deletes the key/value pair associated with the given key.
  #
  # @param key [String] The key to remove.
  # @return [Tracestate] self, if unchanged, or a new Tracestate without
  #   the specified key.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#118
  def delete(key); end

  # Returns true if this Tracestate is empty.
  #
  # @return [Boolean] true if this Tracestate is empty, else false.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#146
  def empty?; end

  # Adds a new key/value pair or updates an existing value for a given key.
  # Keys and values are validated against the W3C Trace Context
  # specification, and any invalid members are logged at DEBUG level and
  # ignored.
  #
  # @param key [String] The key to add or update.
  # @param value [String] The value to add or update.
  # @return [Tracestate] self, if unchanged, or a new Tracestate containing
  #   the new or updated key/value pair.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#102
  def set_value(key, value); end

  # Returns this Tracestate as a Hash.
  #
  # @return [Hash] the members of this Tracestate
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#139
  def to_h; end

  # Returns this Tracestate encoded according to the W3C Trace Context
  # specification https://www.w3.org/TR/trace-context/
  #
  # @return [String] this Tracestate encoded as a string.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#130
  def to_s; end

  # Returns the value associated with the given key, or nil if the key
  # is not present.
  #
  # @param key [String] The key to lookup.
  # @return [String] The value associated with the key, or nil.
  #
  # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#87
  def value(key); end

  class << self
    # Returns a new Tracestate created from the Hash provided. This
    # skips validation of the keys and values, assuming they are already
    # valid.
    # This method is intended only for the use of instance methods in
    # this class.
    #
    # @api private
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#59
    def create(hash); end

    # Returns a Tracestate created from a Hash.
    #
    # @param hash [Hash<String, String>] Key-value pairs to store in the
    #   Tracestate. Keys and values are validated against the W3C Trace
    #   Context specification, and any invalid members are logged at
    #   DEBUG level and dropped.
    # @return [Tracestate] A new Tracestate instance or DEFAULT
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#44
    def from_hash(hash); end

    # Returns a newly created Tracestate parsed from the header provided.
    #
    # @param header [String] Encoding of the tracestate header defined by
    #   the W3C Trace Context specification https://www.w3.org/TR/trace-context/
    # @return [Tracestate] A new Tracestate instance or DEFAULT
    #
    # source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#21
    def from_string(header); end

    private

    def new(*_arg0); end
  end
end

# source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#158
OpenTelemetry::Trace::Tracestate::DEFAULT = T.let(T.unsafe(nil), OpenTelemetry::Trace::Tracestate)

# Defined by https://www.w3.org/TR/trace-context/
#
# source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#64
OpenTelemetry::Trace::Tracestate::MAX_MEMBER_COUNT = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#65
OpenTelemetry::Trace::Tracestate::VALID_KEY = T.let(T.unsafe(nil), Regexp)

# source://opentelemetry-api//lib/opentelemetry/trace/tracestate.rb#66
OpenTelemetry::Trace::Tracestate::VALID_VALUE = T.let(T.unsafe(nil), Regexp)

# Current OpenTelemetry version
#
# source://opentelemetry-api//lib/opentelemetry/version.rb#9
OpenTelemetry::VERSION = T.let(T.unsafe(nil), String)
