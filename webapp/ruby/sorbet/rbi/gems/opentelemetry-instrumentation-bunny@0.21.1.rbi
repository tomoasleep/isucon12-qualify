# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-instrumentation-bunny` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-instrumentation-bunny`.

# OpenTelemetry is an open source observability framework, providing a
# general-purpose API, SDK, and related tools required for the instrumentation
# of cloud-native software, frameworks, and libraries.
#
# The OpenTelemetry module provides global accessors for telemetry objects.
# See the documentation for the `opentelemetry-api` gem for details.
#
# source://opentelemetry-instrumentation-bunny//lib/opentelemetry/instrumentation.rb#13
module OpenTelemetry
  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#36
  def error_handler; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def error_handler=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#44
  def handle_error(exception: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#30
  def logger; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def logger=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#69
  def propagation; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def propagation=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#64
  def tracer_provider; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#52
  def tracer_provider=(provider); end
end

# Instrumentation should be able to handle the case when the library is not installed on a user's system.
#
# source://opentelemetry-instrumentation-bunny//lib/opentelemetry/instrumentation.rb#15
module OpenTelemetry::Instrumentation
  # source://opentelemetry-registry/0.3.0/lib/opentelemetry/instrumentation.rb#21
  def registry; end
end

# Contains the OpenTelemetry instrumentation for the bunny gem
#
# source://opentelemetry-instrumentation-bunny//lib/opentelemetry/instrumentation/bunny.rb#12
module OpenTelemetry::Instrumentation::Bunny; end

# The Instrumentation class contains logic to detect and install the
# bunny instrumentation
#
# source://opentelemetry-instrumentation-bunny//lib/opentelemetry/instrumentation/bunny/instrumentation.rb#14
class OpenTelemetry::Instrumentation::Bunny::Instrumentation < ::OpenTelemetry::Instrumentation::Base
  private

  # source://opentelemetry-instrumentation-bunny//lib/opentelemetry/instrumentation/bunny/instrumentation.rb#34
  def patch; end

  # source://opentelemetry-instrumentation-bunny//lib/opentelemetry/instrumentation/bunny/instrumentation.rb#26
  def require_patches; end
end

# source://opentelemetry-instrumentation-bunny//lib/opentelemetry/instrumentation/bunny/version.rb#10
OpenTelemetry::Instrumentation::Bunny::VERSION = T.let(T.unsafe(nil), String)
