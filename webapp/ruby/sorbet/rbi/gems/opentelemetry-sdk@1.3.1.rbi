# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-sdk` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-sdk`.

# OpenTelemetry is an open source observability framework, providing a
# general-purpose API, SDK, and related tools required for the instrumentation
# of cloud-native software, frameworks, and libraries.
#
# The OpenTelemetry module provides global accessors for telemetry objects.
# See the documentation for the `opentelemetry-api` gem for details.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk.rb#18
module OpenTelemetry
  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#36
  def error_handler; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def error_handler=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#44
  def handle_error(exception: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#30
  def logger; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def logger=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#69
  def propagation; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def propagation=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#64
  def tracer_provider; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#52
  def tracer_provider=(provider); end
end

# SDK provides the reference implementation of the OpenTelemetry API.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk.rb#20
module OpenTelemetry::SDK
  extend ::OpenTelemetry::SDK

  # Configures SDK and instrumentation
  #
  # Example usage:
  #   Without a block defaults are installed without any instrumentation
  #
  #     OpenTelemetry::SDK.configure
  #
  #   Install instrumentation individually with optional config
  #
  #     OpenTelemetry::SDK.configure do |c|
  #       c.use 'OpenTelemetry::Instrumentation::Faraday', tracer_middleware: SomeMiddleware
  #     end
  #
  #   Install all instrumentation with optional config
  #
  #     OpenTelemetry::SDK.configure do |c|
  #       c.use_all 'OpenTelemetry::Instrumentation::Faraday' => { tracer_middleware: SomeMiddleware }
  #     end
  #
  #   Add a span processor
  #
  #     OpenTelemetry::SDK.configure do |c|
  #       c.add_span_processor SpanProcessor.new(SomeExporter.new)
  #     end
  #
  #   Configure everything
  #
  #     OpenTelemetry::SDK.configure do |c|
  #       c.logger = Logger.new(File::NULL)
  #       c.add_span_processor SpanProcessor.new(SomeExporter.new)
  #       c.use_all
  #     end
  #
  # @yieldparam configurator [Configurator] Yields a configurator to the
  #   provided block
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk.rb#63
  def configure; end
end

# ConfigurationError is an exception type used to wrap configuration errors
# passed to OpenTelemetry.error_handler. This can be used to distinguish
# errors reported during SDK configuration.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk.rb#26
class OpenTelemetry::SDK::ConfigurationError < ::OpenTelemetry::Error; end

# The configurator provides defaults and facilitates configuring the
# SDK for use.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#11
class OpenTelemetry::SDK::Configurator
  # @return [Configurator] a new instance of Configurator
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#36
  def initialize; end

  # Add a span processor to the export pipeline
  #
  # @param span_processor [#on_start, #on_finish, #shutdown, #force_flush] A span_processor
  #   that satisfies the duck type #on_start, #on_finish, #shutdown, #force_flush. See
  #   {SimpleSpanProcessor} for an example.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#125
  def add_span_processor(span_processor); end

  # The configure method is where we define the setup process. This allows
  # us to make certain guarantees about which systems and globals are setup
  # at each stage. The setup process is:
  #   - setup logging
  #   - setup propagation
  #   - setup tracer_provider and meter_provider
  #   - install instrumentation
  #
  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#137
  def configure; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#59
  def error_handler; end

  # Sets the attribute error_handler
  #
  # @param value the value to set the attribute error_handler to.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#34
  def error_handler=(_arg0); end

  # Sets the attribute id_generator
  #
  # @param value the value to set the attribute id_generator to.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#34
  def id_generator=(_arg0); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#46
  def logger; end

  # Accepts a logger and wraps it in the {ForwardingLogger} which allows
  # for controlling the severity level emitted by the OpenTelemetry.logger
  # independently of the supplied logger.
  #
  # @param new_logger [Logger] The logger for OpenTelemetry to use
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#55
  def logger=(new_logger); end

  # Sets the attribute propagators
  #
  # @param value the value to set the attribute propagators to.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#34
  def propagators=(_arg0); end

  # Accepts a resource object that is merged with the default telemetry sdk
  # resource. The use of this method is optional, and is provided as means
  # to include additional resource information.
  # If a resource key collision occurs the passed in resource takes priority.
  #
  # @param new_resource [Resource] The resource to be merged
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#69
  def resource=(new_resource); end

  # Accepts a string that is merged in as the service.name resource attribute.
  # The most recent assigned value will be used in the event of repeated
  # calls to this setter.
  #
  # @param service_name [String] The value to be used as the service name
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#77
  def service_name=(service_name); end

  # Accepts a string that is merged in as the service.version resource attribute.
  # The most recent assigned value will be used in the event of repeated
  # calls to this setter.
  #
  # @param service_version [String] The value to be used as the service version
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#87
  def service_version=(service_version); end

  # Install an instrumentation with specificied optional +config+.
  # Use can be called multiple times to install multiple instrumentation.
  # Only +use+ or +use_all+, but not both when installing
  # instrumentation. A call to +use_all+ after +use+ will result in an
  # exception.
  #
  # @param instrumentation_name [String] The name of the instrumentation
  # @param config [optional Hash] The config for this instrumentation
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#101
  def use(instrumentation_name, config = T.unsafe(nil)); end

  # Install all registered instrumentation. Configuration for specific
  # instrumentation can be provided with the optional +instrumentation_config_map+
  # parameter. Only +use+ or +use_all+, but not both when installing
  # instrumentation. A call to +use+ after +use_all+ will result in an
  # exception.
  #
  # @param instrumentation_config_map [optional Hash<String,Hash>] A map with string keys
  #   representing the instrumentation name and values specifying the instrumentation config
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#115
  def use_all(instrumentation_config_map = T.unsafe(nil)); end

  private

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#156
  def check_use_mode!(mode); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#199
  def configure_propagation; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#170
  def configure_span_processors; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#225
  def fetch_exporter(name, class_name); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#218
  def fetch_propagator(name, class_name, gem_suffix = T.unsafe(nil)); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#161
  def install_instrumentation; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#150
  def metrics_configuration_hook; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#152
  def tracer_provider; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#175
  def wrapped_exporters_from_env; end
end

# @api private
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#13
class OpenTelemetry::SDK::Configurator::NoopTextMapPropagator
  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#19
  def extract(carrier, context: T.unsafe(nil), getter: T.unsafe(nil)); end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#23
  def fields; end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#17
  def inject(carrier, context: T.unsafe(nil), setter: T.unsafe(nil)); end
end

# @api private
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#14
OpenTelemetry::SDK::Configurator::NoopTextMapPropagator::EMPTY_LIST = T.let(T.unsafe(nil), Array)

# source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#30
OpenTelemetry::SDK::Configurator::USE_MODE_ALL = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#29
OpenTelemetry::SDK::Configurator::USE_MODE_ONE = T.let(T.unsafe(nil), Integer)

# source://opentelemetry-sdk//lib/opentelemetry/sdk/configurator.rb#28
OpenTelemetry::SDK::Configurator::USE_MODE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# The ForwardingLogger provides a wrapper to control the OpenTelemetry
# log level, while respecting the configured level of the supplied logger.
# If the OTEL_LOG_LEVEL is set to debug, and the supplied logger is configured
# with an ERROR log level, only OpenTelemetry logs at the ERROR level or higher
# will be emitted.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/forwarding_logger.rb#12
class OpenTelemetry::SDK::ForwardingLogger
  # @return [ForwardingLogger] a new instance of ForwardingLogger
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/forwarding_logger.rb#13
  def initialize(logger, level:); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/forwarding_logger.rb#38
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/forwarding_logger.rb#44
  def debug(progname = T.unsafe(nil), &block); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/forwarding_logger.rb#56
  def error(progname = T.unsafe(nil), &block); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/forwarding_logger.rb#60
  def fatal(progname = T.unsafe(nil), &block); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/forwarding_logger.rb#48
  def info(progname = T.unsafe(nil), &block); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/forwarding_logger.rb#64
  def unknown(progname = T.unsafe(nil), &block); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/forwarding_logger.rb#52
  def warn(progname = T.unsafe(nil), &block); end
end

# InstrumentationLibrary is a struct containing library information for export.
#
# @deprecated Use InstrumentationScope instead.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/instrumentation_library.rb#11
class OpenTelemetry::SDK::InstrumentationLibrary < ::Struct
  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute version
  #
  # @return [Object] the current value of version
  def version; end

  # Sets the attribute version
  #
  # @param value [Object] the value to set the attribute version to.
  # @return [Object] the newly set value
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# InstrumentationScope is a struct containing scope information for export.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/instrumentation_scope.rb#10
class OpenTelemetry::SDK::InstrumentationScope < ::Struct
  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute version
  #
  # @return [Object] the current value of version
  def version; end

  # Sets the attribute version
  #
  # @param value [Object] the value to set the attribute version to.
  # @return [Object] the newly set value
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Internal contains helpers used by the reference implementation.
#
# @api private
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/internal.rb#12
module OpenTelemetry::SDK::Internal
  extend ::OpenTelemetry::SDK::Internal

  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/internal.rb#15
  def boolean?(value); end

  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/internal.rb#23
  def numeric?(value); end

  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/internal.rb#31
  def valid_array_value?(value); end

  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/internal.rb#51
  def valid_attributes?(owner, kind, attrs); end

  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/internal.rb#19
  def valid_key?(key); end

  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/internal.rb#27
  def valid_simple_value?(value); end

  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/internal.rb#47
  def valid_value?(value); end
end

# Resources contains the {Resource} class.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/resources.rb#10
module OpenTelemetry::SDK::Resources; end

# Resource represents a resource, which captures identifying information about the entities
# for which telemetry (metrics or traces) is reported.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/resources/resource.rb#12
class OpenTelemetry::SDK::Resources::Resource
  # The constructor is private and only for use internally by the class.
  # Users should use the {create} factory method to obtain a {Resource}
  # instance.
  #
  # @api private
  # @param frozen_attributes [Hash<String, String>] Frozen-hash of frozen-string
  #   key-value pairs to be used as attributes for this resource
  # @return [Resource]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/resources/resource.rb#84
  def initialize(frozen_attributes); end

  # Returns an enumerator for attributes of this {Resource}
  #
  # @return [Enumerator]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/resources/resource.rb#91
  def attribute_enumerator; end

  # Returns a new, merged {Resource} by merging the current {Resource} with
  # the other {Resource}. In case of a collision, the current {Resource}
  # takes precedence
  #
  # @param other [Resource] The other resource to merge
  # @return [Resource] A new resource formed by merging the current resource
  #   with other
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/resources/resource.rb#102
  def merge(other); end

  protected

  # Returns the value of attribute attributes.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/resources/resource.rb#110
  def attributes; end

  class << self
    # Returns a newly created {Resource} with the specified attributes
    #
    # @param Hash{String [Hash{String => String, Numeric, Boolean} attributes Hash of key-value pairs to be used
    # as attributes for this resource] => String, Numeric, Boolean} attributes Hash of key-value pairs to be used
    #   as attributes for this resource
    # @raise [ArgumentError] If attribute keys and values are not strings
    # @return [Resource]
    #
    # source://opentelemetry-sdk//lib/opentelemetry/sdk/resources/resource.rb#22
    def create(attributes = T.unsafe(nil)); end

    # source://opentelemetry-sdk//lib/opentelemetry/sdk/resources/resource.rb#33
    def default; end

    # source://opentelemetry-sdk//lib/opentelemetry/sdk/resources/resource.rb#56
    def process; end

    # source://opentelemetry-sdk//lib/opentelemetry/sdk/resources/resource.rb#37
    def telemetry_sdk; end

    private

    def new(*_arg0); end

    # source://opentelemetry-sdk//lib/opentelemetry/sdk/resources/resource.rb#70
    def service_name_from_env; end
  end
end

# The Trace module contains the OpenTelemetry tracing reference
# implementation.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace.rb#11
module OpenTelemetry::SDK::Trace; end

# A text annotation with a set of attributes and a timestamp for export.
#
# Field types are as follows:
#  name: String
#  attributes: frozen Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}
#  timestamp: Integer nanoseconds since Epoch
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/event.rb#16
class OpenTelemetry::SDK::Trace::Event < ::Struct
  # Returns the value of attribute attributes
  #
  # @return [Object] the current value of attributes
  def attributes; end

  # Sets the attribute attributes
  #
  # @param value [Object] the value to set the attribute attributes to.
  # @return [Object] the newly set value
  def attributes=(_); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute timestamp
  #
  # @return [Object] the current value of timestamp
  def timestamp; end

  # Sets the attribute timestamp
  #
  # @param value [Object] the value to set the attribute timestamp to.
  # @return [Object] the newly set value
  def timestamp=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# The Export module contains the built-in exporters and span processors for the OpenTelemetry
# reference implementation.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export.rb#12
module OpenTelemetry::SDK::Trace::Export; end

# Implementation of the duck type SpanProcessor that batches spans
# exported by the SDK then pushes them to the exporter pipeline.
#
# Typically, the BatchSpanProcessor will be more suitable for
# production environments than the SimpleSpanProcessor.
#
# All spans reported by the SDK implementation are first added to a
# synchronized queue (with a {max_queue_size} maximum size, after the
# size is reached spans are dropped) and exported every
# schedule_delay to the exporter pipeline in batches of
# max_export_batch_size.
#
# If the queue gets half full a preemptive notification is sent to the
# worker thread that exports the spans to wake up and start a new
# export cycle.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#28
class OpenTelemetry::SDK::Trace::Export::BatchSpanProcessor
  # Returns a new instance of the {BatchSpanProcessor}.
  #
  # @param exporter [SpanExporter] the (duck type) SpanExporter to where the
  #   recorded Spans are pushed after batching.
  # @param exporter_timeout [Numeric] the maximum allowed time to export data.
  #   Defaults to the value of the OTEL_BSP_EXPORT_TIMEOUT
  #   environment variable, if set, or 30,000 (30 seconds).
  # @param schedule_delay [Numeric] the delay interval between two consecutive exports.
  #   Defaults to the value of the OTEL_BSP_SCHEDULE_DELAY environment
  #   variable, if set, or 5,000 (5 seconds).
  # @param max_queue_size [Integer] the maximum queue size in spans.
  #   Defaults to the value of the OTEL_BSP_MAX_QUEUE_SIZE environment
  #   variable, if set, or 2048.
  # @param max_export_batch_size [Integer] the maximum batch size in spans.
  #   Defaults to the value of the OTEL_BSP_MAX_EXPORT_BATCH_SIZE environment
  #   variable, if set, or 512.
  # @raise [ArgumentError]
  # @return a new instance of the {BatchSpanProcessor}.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#47
  def initialize(exporter, exporter_timeout: T.unsafe(nil), schedule_delay: T.unsafe(nil), max_queue_size: T.unsafe(nil), max_export_batch_size: T.unsafe(nil), start_thread_on_boot: T.unsafe(nil), metrics_reporter: T.unsafe(nil)); end

  # Export all ended spans to the configured `Exporter` that have not yet
  # been exported.
  #
  # This method should only be called in cases where it is absolutely
  # necessary, such as when using some FaaS providers that may suspend
  # the process after an invocation, but before the `Processor` exports
  # the completed spans.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] SUCCESS if no error occurred, FAILURE if a
  #   non-specific failure occurred, TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#103
  def force_flush(timeout: T.unsafe(nil)); end

  # Adds a span to the batch. Thread-safe; may block on lock.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#77
  def on_finish(span); end

  # Does nothing for this processor
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#74
  def on_start(_span, _parent_context); end

  # Shuts the consumer thread down and flushes the current accumulated buffer
  # will block until the thread is finished.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] SUCCESS if no error occurred, FAILURE if a
  #   non-specific failure occurred, TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#139
  def shutdown(timeout: T.unsafe(nil)); end

  private

  # Returns the value of attribute batch_size.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#156
  def batch_size; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#186
  def export_batch(batch, timeout: T.unsafe(nil)); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#211
  def fetch_batch; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#215
  def lock; end

  # Returns the value of attribute max_queue_size.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#156
  def max_queue_size; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#207
  def report_dropped_spans(count, reason:); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#196
  def report_result(result_code, batch); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#174
  def reset_on_fork(restart_thread: T.unsafe(nil)); end

  # Returns the value of attribute spans.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#156
  def spans; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/batch_span_processor.rb#158
  def work; end
end

# Outputs {SpanData} to the console.
#
# Potentially useful for exploratory purposes.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/console_span_exporter.rb#14
class OpenTelemetry::SDK::Trace::Export::ConsoleSpanExporter
  # @return [ConsoleSpanExporter] a new instance of ConsoleSpanExporter
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/console_span_exporter.rb#15
  def initialize; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/console_span_exporter.rb#19
  def export(spans, timeout: T.unsafe(nil)); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/console_span_exporter.rb#27
  def force_flush(timeout: T.unsafe(nil)); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/console_span_exporter.rb#31
  def shutdown(timeout: T.unsafe(nil)); end
end

# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export.rb#13
class OpenTelemetry::SDK::Trace::Export::ExportError < ::OpenTelemetry::Error; end

# The operation finished with an error.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export.rb#21
OpenTelemetry::SDK::Trace::Export::FAILURE = T.let(T.unsafe(nil), Integer)

# A SpanExporter implementation that can be used to test OpenTelemetry integration.
#
# @example Usage in a test suite:
#   class MyClassTest
#   def setup
#   @tracer_provider = TracerProvider.new
#   # The default is `recording: true`, which is appropriate in non-test environments.
#   @exporter = InMemorySpanExporter.new(recording: false)
#   @tracer_provider.add_span_processor(SimpleSampledSpansProcessor.new(@exporter))
#   end
#
#   def test_finished_spans
#   @exporter.recording = true
#   @tracer_provider.tracer.in_span("span") {}
#
#   spans = @exporter.finished_spans
#   spans.wont_be_nil
#   spans.size.must_equal(1)
#   spans[0].name.must_equal("span")
#
#   @exporter.recording = false
#   end
#   end
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/in_memory_span_exporter.rb#34
class OpenTelemetry::SDK::Trace::Export::InMemorySpanExporter
  # Returns a new instance of the {InMemorySpanExporter}.
  #
  # @return a new instance of the {InMemorySpanExporter}.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/in_memory_span_exporter.rb#42
  def initialize(recording: T.unsafe(nil)); end

  # Called to export sampled {SpanData}s.
  #
  # @param span_datas [Enumerable<SpanData>] the list of sampled {SpanData}s to be
  #   exported.
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] the result of the export, SUCCESS or
  #   FAILURE
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/in_memory_span_exporter.rb#75
  def export(span_datas, timeout: T.unsafe(nil)); end

  # Returns a frozen array of the finished {SpanData}s, represented by
  # {io.opentelemetry.proto.trace.v1.Span}.
  #
  # @return [Array<SpanData>] a frozen array of the finished {SpanData}s.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/in_memory_span_exporter.rb#53
  def finished_spans; end

  # Called when {TracerProvider#force_flush} is called, if this exporter is
  # registered to a {TracerProvider} object.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] SUCCESS if no error occurred, FAILURE if a
  #   non-specific failure occurred, TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/in_memory_span_exporter.rb#90
  def force_flush(timeout: T.unsafe(nil)); end

  # Controls whether or not the exporter will record spans, or discard them.
  #
  # @return [Boolean] when true, the exporter is recording. By default, this is true.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/in_memory_span_exporter.rb#37
  def recording; end

  # Controls whether or not the exporter will record spans, or discard them.
  #
  # @return [Boolean] when true, the exporter is recording. By default, this is true.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/in_memory_span_exporter.rb#37
  def recording=(_arg0); end

  # Clears the internal collection of finished {Span}s.
  #
  # Does not reset the state of this exporter if already shutdown.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/in_memory_span_exporter.rb#62
  def reset; end

  # Called when {TracerProvider#shutdown} is called, if this exporter is
  # registered to a {TracerProvider} object.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] SUCCESS if no error occurred, FAILURE if a
  #   non-specific failure occurred, TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/in_memory_span_exporter.rb#100
  def shutdown(timeout: T.unsafe(nil)); end
end

# MetricsReporter defines an interface used for reporting metrics from
# span processors (like the BatchSpanProcessor) and exporters. It can
# be used to report metrics such as dropped spans, and successful and
# failed export attempts. This exists to decouple the Trace SDK from
# the unstable OpenTelemetry Metrics API. An example implementation in
# terms of StatsD is:
#
# @example
#   module MetricsReporter
#   def add_to_counter(metric, increment: 1, labels: {})
#   StatsD.increment(metric, increment, labels, no_prefix: true)
#   end
#   def record_value(metric, value:, labels: {})
#   StatsD.distribution(metric, value, labels, no_prefix: true)
#   end
#   def observe_value(metric, value:, labels: {})
#   StatsD.gauge(metric, value, labels, no_prefix: true)
#   end
#   end
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/metrics_reporter.rb#30
module OpenTelemetry::SDK::Trace::Export::MetricsReporter
  extend ::OpenTelemetry::SDK::Trace::Export::MetricsReporter

  # Adds an increment to a metric with the provided labels.
  #
  # @param metric [String] The metric name.
  # @param increment [optional Numeric] An optional increment to report.
  # @param labels [optional Hash<String, String>] Optional labels to
  #   associate with the metric.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/metrics_reporter.rb#39
  def add_to_counter(metric, increment: T.unsafe(nil), labels: T.unsafe(nil)); end

  # Observes a value for a metric with the provided labels.
  #
  # @param metric [String] The metric name.
  # @param value [Numeric] The value to observe.
  # @param labels [optional Hash<String, String>] Optional labels to
  #   associate with the metric.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/metrics_reporter.rb#55
  def observe_value(metric, value:, labels: T.unsafe(nil)); end

  # Records a value for a metric with the provided labels.
  #
  # @param metric [String] The metric name.
  # @param value [Numeric] The value to report.
  # @param labels [optional Hash<String, String>] Optional labels to
  #   associate with the metric.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/metrics_reporter.rb#47
  def record_value(metric, value:, labels: T.unsafe(nil)); end
end

# The operation finished successfully.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export.rb#18
OpenTelemetry::SDK::Trace::Export::SUCCESS = T.let(T.unsafe(nil), Integer)

# An implementation of the duck type SpanProcessor that converts the
# {Span} to {io.opentelemetry.proto.trace.v1.Span} and passes it to the
# configured exporter.
#
# Typically, the SimpleSpanProcessor will be most suitable for use in testing;
# it should be used with caution in production. It may be appropriate for
# production use in scenarios where creating multiple threads is not desirable
# as well as scenarios where different custom attributes should be added to
# individual spans based on code scopes.
#
# Only spans that are recorded are converted, {OpenTelemetry::Trace::Span#is_recording?} must
# return true.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/simple_span_processor.rb#23
class OpenTelemetry::SDK::Trace::Export::SimpleSpanProcessor
  # Returns a new {SimpleSpanProcessor} that converts spans to
  # proto and forwards them to the given span_exporter.
  #
  # @param span_exporter the (duck type) SpanExporter to where the
  #   recorded Spans are pushed.
  # @raise ArgumentError if the span_exporter is nil.
  # @return [SimpleSpanProcessor]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/simple_span_processor.rb#31
  def initialize(span_exporter); end

  # Export all ended spans to the configured `Exporter` that have not yet
  # been exported, then call {Exporter#force_flush}.
  #
  # This method should only be called in cases where it is absolutely
  # necessary, such as when using some FaaS providers that may suspend
  # the process after an invocation, but before the `Processor` exports
  # the completed spans.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] SUCCESS if no error occurred, FAILURE if a
  #   non-specific failure occurred, TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/simple_span_processor.rb#76
  def force_flush(timeout: T.unsafe(nil)); end

  # Called when a {Span} is ended, if the {Span#recording?}
  # returns true.
  #
  # This method is called synchronously on the execution thread, should
  # not throw or block the execution thread.
  #
  # @param span [Span] the {Span} that just ended.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/simple_span_processor.rb#57
  def on_finish(span); end

  # Called when a {Span} is started, if the {Span#recording?}
  # returns true.
  #
  # This method is called synchronously on the execution thread, should
  # not throw or block the execution thread.
  #
  # @param span [Span] the {Span} that just started.
  # @param parent_context [Context] the parent {Context} of the newly
  #   started span.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/simple_span_processor.rb#46
  def on_start(span, parent_context); end

  # Called when {TracerProvider#shutdown} is called.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] SUCCESS if no error occurred, FAILURE if a
  #   non-specific failure occurred, TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/simple_span_processor.rb#85
  def shutdown(timeout: T.unsafe(nil)); end
end

# SpanExporter describes a duck type. It is not required to subclass this
# class to provide an implementation of SpanExporter, provided the interface is
# satisfied. SpanExporter allows different tracing services to export
# recorded data for sampled spans in their own format.
#
# To export data an exporter MUST be registered to the {TracerProvider} using
# a {SpanProcessor} implementation.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/span_exporter.rb#18
class OpenTelemetry::SDK::Trace::Export::SpanExporter
  # @return [SpanExporter] a new instance of SpanExporter
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/span_exporter.rb#19
  def initialize; end

  # Called to export sampled {SpanData}s.
  #
  # @param span_data [Enumerable<SpanData>] the list of sampled {SpanData} to be
  #   exported.
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] the result of the export.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/span_exporter.rb#29
  def export(span_data, timeout: T.unsafe(nil)); end

  # Called when {TracerProvider#force_flush} is called, if this exporter is
  # registered to a {TracerProvider} object.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] SUCCESS if no error occurred, FAILURE if a
  #   non-specific failure occurred, TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/span_exporter.rb#41
  def force_flush(timeout: T.unsafe(nil)); end

  # Called when {TracerProvider#shutdown} is called, if this exporter is
  # registered to a {TracerProvider} object.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export/span_exporter.rb#49
  def shutdown(timeout: T.unsafe(nil)); end
end

# The operation timed out.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/export.rb#26
OpenTelemetry::SDK::Trace::Export::TIMEOUT = T.let(T.unsafe(nil), Integer)

# The Samplers module contains the sampling logic for OpenTelemetry. The
# reference implementation provides a {TraceIdRatioBased}, {ALWAYS_ON},
# {ALWAYS_OFF}, and {ParentBased}.
#
# Custom samplers can be provided by SDK users. The required interface is:
#
#   should_sample?(trace_id:, parent_context:, links:, name:, kind:, attributes:) -> Result
#   description -> String
#
# Where:
#
# @param trace_id [String] The trace_id of the {Span} to be created.
# @param parent_context [OpenTelemetry::Context] The
#   {OpenTelemetry::Context} with a parent {Span}. The {Span}'s
#   {OpenTelemetry::Trace::SpanContext} may be invalid to indicate a
#   root span.
# @param links [Enumerable<Link>] A collection of links to be associated
#   with the {Span} to be created. Can be nil.
# @param name [String] Name of the {Span} to be created.
# @param kind [Symbol] The {OpenTelemetry::Trace::SpanKind} of the {Span}
#   to be created. Can be nil.
# @param attributes [Hash<String, Object>] Attributes to be attached
#   to the {Span} to be created. Can be nil.
# @return [Result] The sampling result.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/decision.rb#10
module OpenTelemetry::SDK::Trace::Samplers
  class << self
    # Returns a new sampler. It delegates to samplers according to the following rules:
    #
    # | Parent | parent.remote? | parent.trace_flags.sampled? | Invoke sampler |
    # |--|--|--|--|
    # | absent | n/a | n/a | root |
    # | present | true | true | remote_parent_sampled |
    # | present | true | false | remote_parent_not_sampled |
    # | present | false | true | local_parent_sampled |
    # | present | false | false | local_parent_not_sampled |
    #
    # @param root [Sampler] The sampler to which the sampling
    #   decision is delegated for spans with no parent (root spans).
    # @param remote_parent_sampled [optional Sampler] The sampler to which the sampling
    #   decision is delegated for remote parent sampled spans. Defaults to ALWAYS_ON.
    # @param remote_parent_not_sampled [optional Sampler] The sampler to which the sampling
    #   decision is delegated for remote parent not sampled spans. Defaults to ALWAYS_OFF.
    # @param local_parent_sampled [optional Sampler] The sampler to which the sampling
    #   decision is delegated for local parent sampled spans. Defaults to ALWAYS_ON.
    # @param local_parent_not_sampled [optional Sampler] The sampler to which the sampling
    #   decision is delegated for local parent not sampld spans. Defaults to ALWAYS_OFF.
    #
    # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers.rb#67
    def parent_based(root:, remote_parent_sampled: T.unsafe(nil), remote_parent_not_sampled: T.unsafe(nil), local_parent_sampled: T.unsafe(nil), local_parent_not_sampled: T.unsafe(nil)); end

    # Returns a new sampler. The ratio describes the proportion of the trace ID
    # space that is sampled.
    #
    # @param ratio [Numeric] The desired sampling ratio.
    #   Must be within [0.0, 1.0].
    # @raise [ArgumentError] if ratio is out of range
    #
    # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers.rb#83
    def trace_id_ratio_based(ratio); end
  end
end

# Returns a {Result} with {Decision::DROP}.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers.rb#45
OpenTelemetry::SDK::Trace::Samplers::ALWAYS_OFF = T.let(T.unsafe(nil), OpenTelemetry::SDK::Trace::Samplers::ConstantSampler)

# Returns a {Result} with {Decision::RECORD_AND_SAMPLE}.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers.rb#42
OpenTelemetry::SDK::Trace::Samplers::ALWAYS_ON = T.let(T.unsafe(nil), OpenTelemetry::SDK::Trace::Samplers::ConstantSampler)

# Implements a sampler returning a result with a constant decision.
#
# @api private
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/constant_sampler.rb#14
class OpenTelemetry::SDK::Trace::Samplers::ConstantSampler
  # @api private
  # @return [ConstantSampler] a new instance of ConstantSampler
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/constant_sampler.rb#17
  def initialize(decision:, description:); end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/constant_sampler.rb#22
  def ==(other); end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/constant_sampler.rb#15
  def description; end

  # See {Samplers}.
  #
  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/constant_sampler.rb#29
  def should_sample?(trace_id:, parent_context:, links:, name:, kind:, attributes:); end

  protected

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/constant_sampler.rb#35
  def decision; end
end

# The Decision module contains a set of constants to be used in the
# decision part of a sampling {Result}.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/decision.rb#13
module OpenTelemetry::SDK::Trace::Samplers::Decision; end

# Decision to not record events and not sample.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/decision.rb#15
OpenTelemetry::SDK::Trace::Samplers::Decision::DROP = T.let(T.unsafe(nil), Symbol)

# Decision to record events and sample.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/decision.rb#21
OpenTelemetry::SDK::Trace::Samplers::Decision::RECORD_AND_SAMPLE = T.let(T.unsafe(nil), Symbol)

# Decision to record events and not sample.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/decision.rb#18
OpenTelemetry::SDK::Trace::Samplers::Decision::RECORD_ONLY = T.let(T.unsafe(nil), Symbol)

# This is a composite sampler. ParentBased helps distinguished between the
# following cases:
#   * No parent (root span).
#   * Remote parent (SpanContext.remote? with trace_flags.sampled?)
#   * Remote parent (SpanContext.remote? with !trace_flags.sampled?)
#   * Local parent (!SpanContext.remote? with trace_flags.sampled?)
#   * Local parent (!SpanContext.remote? with !trace_flags.sampled?)
#
# @api private
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/parent_based.rb#20
class OpenTelemetry::SDK::Trace::Samplers::ParentBased
  # @api private
  # @return [ParentBased] a new instance of ParentBased
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/parent_based.rb#21
  def initialize(root, remote_parent_sampled, remote_parent_not_sampled, local_parent_sampled, local_parent_not_sampled); end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/parent_based.rb#29
  def ==(other); end

  # See {Samplers}.
  #
  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/parent_based.rb#40
  def description; end

  # See {Samplers}.
  #
  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/parent_based.rb#47
  def should_sample?(trace_id:, parent_context:, links:, name:, kind:, attributes:); end

  protected

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/parent_based.rb#61
  def local_parent_not_sampled; end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/parent_based.rb#61
  def local_parent_sampled; end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/parent_based.rb#61
  def remote_parent_not_sampled; end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/parent_based.rb#61
  def remote_parent_sampled; end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/parent_based.rb#61
  def root; end
end

# The Result class represents an arbitrary sampling result. It has
# boolean values for the sampling decision and whether to record
# events, and a collection of attributes to be attached to a sampled
# root span.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/result.rb#15
class OpenTelemetry::SDK::Trace::Samplers::Result
  # Returns a new sampling result with the specified decision and
  # attributes.
  #
  # @param decision [Symbol] Whether or not a span should be sampled
  #   and/or record events.
  # @param attributes [optional Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}] A frozen or freezable hash containing attributes to be
  #   attached to the span.
  # @param tracestate [Tracestate] A Tracestate that will be associated
  #   with the Span through the new SpanContext. If the sampler returns
  #   an empty Tracestate here, the Tracestate will be cleared, so
  #   samplers SHOULD normally return the passed-in Tracestate if they
  #   do not intend to change it.
  # @return [Result] a new instance of Result
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/result.rb#43
  def initialize(decision:, tracestate:, attributes: T.unsafe(nil)); end

  # Returns a frozen hash of attributes to be attached to the span.
  #
  # @return [Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/result.rb#23
  def attributes; end

  # Returns true if this span should record events, attributes, status, etc.
  #
  # @return [Boolean] recording decision
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/result.rb#59
  def recording?; end

  # Returns true if this span should be sampled.
  #
  # @return [Boolean] sampling decision
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/result.rb#52
  def sampled?; end

  # Returns a Tracestate to be associated with the span.
  #
  # @return [Tracestate]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/result.rb#28
  def tracestate; end
end

# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/result.rb#17
OpenTelemetry::SDK::Trace::Samplers::Result::DECISIONS = T.let(T.unsafe(nil), Array)

# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/result.rb#16
OpenTelemetry::SDK::Trace::Samplers::Result::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# Implements sampling based on a probability.
#
# @api private
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/trace_id_ratio_based.rb#14
class OpenTelemetry::SDK::Trace::Samplers::TraceIdRatioBased
  # @api private
  # @return [TraceIdRatioBased] a new instance of TraceIdRatioBased
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/trace_id_ratio_based.rb#17
  def initialize(probability); end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/trace_id_ratio_based.rb#23
  def ==(other); end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/trace_id_ratio_based.rb#15
  def description; end

  # See {Samplers}.
  #
  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/trace_id_ratio_based.rb#30
  def should_sample?(trace_id:, parent_context:, links:, name:, kind:, attributes:); end

  private

  # @api private
  # @return [Boolean]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/samplers/trace_id_ratio_based.rb#41
  def sample?(trace_id); end
end

# Implementation of {OpenTelemetry::Trace::Span} that records trace events.
#
# This implementation includes reader methods intended to allow access to
# internal state by {SpanProcessor}s.
# Instrumentation should use the API provided by {OpenTelemetry::Trace::Span}
# and should consider {Span} to be write-only.
#
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#18
class OpenTelemetry::SDK::Trace::Span < ::OpenTelemetry::Trace::Span
  # @api private
  # @return [Span] a new instance of Span
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#285
  def initialize(context, parent_context, parent_span, name, kind, parent_span_id, span_limits, span_processors, attributes, links, start_timestamp, resource, instrumentation_scope); end

  # Set attribute
  #
  # Note that the OpenTelemetry project
  # {https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md
  # documents} certain "standard attributes" that have prescribed semantic
  # meanings.
  #
  # @param key [String]
  # @param value [String, Boolean, Numeric, Array<String, Numeric, Boolean>] Values must be non-nil and (array of) string, boolean or numeric type.
  #   Array values must not contain nil elements and all elements must be of
  #   the same basic type (string, numeric, boolean).
  # @return [self] returns itself
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#79
  def []=(key, value); end

  # Add attributes
  #
  # Note that the OpenTelemetry project
  # {https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md
  # documents} certain "standard attributes" that have prescribed semantic
  # meanings.
  #
  # @param attributes [Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}] Values must be non-nil and (array of) string, boolean or numeric type.
  #   Array values must not contain nil elements and all elements must be of
  #   the same basic type (string, numeric, boolean).
  # @return [self] returns itself
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#107
  def add_attributes(attributes); end

  # Add an Event to a {Span}.
  #
  # Example:
  #
  #   span.add_event('event', attributes: {'eager' => true})
  #
  # Note that the OpenTelemetry project
  # {https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md
  # documents} certain "standard event names and keys" which have
  # prescribed semantic meanings.
  #
  # @param name [String] Name of the event.
  # @param attributes [optional Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}] One or more key:value pairs, where the keys must be strings and the
  #   values may be (array of) string, boolean or numeric type.
  # @param timestamp [optional Time] Optional timestamp for the event.
  # @return [self] returns itself
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#139
  def add_event(name, attributes: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # Return a frozen copy of the current attributes. This is intended for
  # use of SpanProcessors and should not be considered part of the public
  # interface for instrumentation.
  #
  # @return [Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}] may be nil.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#39
  def attributes; end

  # The following readers are intended for the use of SpanProcessors and
  # should not be considered part of the public interface for instrumentation.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#26
  def end_timestamp; end

  # Return a frozen copy of the current events. This is intended for use
  # of SpanProcessors and should not be considered part of the public
  # interface for instrumentation.
  #
  # @return [Array<Event>] may be nil.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#50
  def events; end

  # Finishes the Span
  #
  # Implementations MUST ignore all subsequent calls to {#finish} (there
  # might be exceptions when Tracer is streaming event and has no mutable
  # state associated with the Span).
  #
  # Call to {#finish} MUST not have any effects on child spans. Those may
  # still be running and can be ended later.
  #
  # This API MUST be non-blocking*.
  #
  # (*) not actually non-blocking. In particular, it synchronizes on an
  # internal mutex, which will typically be uncontended, and
  # {Export::BatchSpanProcessor} will also synchronize on a mutex, if that
  # processor is used.
  #
  # @param end_timestamp [Time] optional end timestamp for the span.
  # @return [self] returns itself
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#236
  def finish(end_timestamp: T.unsafe(nil)); end

  # The following readers are intended for the use of SpanProcessors and
  # should not be considered part of the public interface for instrumentation.
  # Returns an InstrumentationScope struct, which is backwards compatible with InstrumentationLibrary.
  #
  # @deprecated Please use instrumentation_scope instead.
  # @return InstrumentationScope
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#26
  def instrumentation_library; end

  # The following readers are intended for the use of SpanProcessors and
  # should not be considered part of the public interface for instrumentation.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#26
  def instrumentation_scope; end

  # The following readers are intended for the use of SpanProcessors and
  # should not be considered part of the public interface for instrumentation.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#26
  def kind; end

  # The following readers are intended for the use of SpanProcessors and
  # should not be considered part of the public interface for instrumentation.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#26
  def links; end

  # The following readers are intended for the use of SpanProcessors and
  # should not be considered part of the public interface for instrumentation.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#26
  def name; end

  # Updates the Span name
  #
  # Upon this update, any sampling behavior based on Span name will depend
  # on the implementation.
  #
  # @param new_name [String] The new operation name, which supersedes
  #   whatever was passed in when the Span was started
  # @return [void]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#207
  def name=(new_name); end

  # The following readers are intended for the use of SpanProcessors and
  # should not be considered part of the public interface for instrumentation.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#26
  def parent_span_id; end

  # Record an exception during the execution of this span. Multiple exceptions
  # can be recorded on a span.
  #
  # @param exception [Exception] The exception to be recorded
  # @param attributes [optional Hash{String => String, Numeric, Boolean, Array<String, Numeric, Boolean>}] One or more key:value pairs, where the keys must be
  #   strings and the values may be (array of) string, boolean or numeric
  #   type.
  # @return [void]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#164
  def record_exception(exception, attributes: T.unsafe(nil)); end

  # Return the flag whether this span is recording events
  #
  # @return [Boolean] true if this Span is active and recording information
  #   like events with the #add_event operation and attributes using
  #   #set_attribute.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#61
  def recording?; end

  # The following readers are intended for the use of SpanProcessors and
  # should not be considered part of the public interface for instrumentation.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#26
  def resource; end

  # Set attribute
  #
  # Note that the OpenTelemetry project
  # {https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-semantic-conventions.md
  # documents} certain "standard attributes" that have prescribed semantic
  # meanings.
  #
  # @param key [String]
  # @param value [String, Boolean, Numeric, Array<String, Numeric, Boolean>] Values must be non-nil and (array of) string, boolean or numeric type.
  #   Array values must not contain nil elements and all elements must be of
  #   the same basic type (string, numeric, boolean).
  # @return [self] returns itself
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#79
  def set_attribute(key, value); end

  # The following readers are intended for the use of SpanProcessors and
  # should not be considered part of the public interface for instrumentation.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#26
  def start_timestamp; end

  # The following readers are intended for the use of SpanProcessors and
  # should not be considered part of the public interface for instrumentation.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#26
  def status; end

  # Sets the Status to the Span
  #
  # If used, this will override the default Span status. Default has code = Status::UNSET.
  #
  # An attempt to set the status with code == Status::UNSET is ignored.
  # If the status is set with code == Status::OK, any further attempt to set the status
  # is ignored.
  #
  # @param status [Status] The new status, which overrides the default Span
  #   status, which has code = Status::UNSET.
  # @return [void]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#186
  def status=(status); end

  # Returns a SpanData containing a snapshot of the Span fields. It is
  # assumed that the Span has been finished, and that no further
  # modifications will be made to the Span.
  #
  # This method should be called *only* from a SpanProcessor prior to
  # calling the SpanExporter.
  #
  # @api private
  # @return [SpanData]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#261
  def to_span_data; end

  protected

  # Returns the value of attribute monotonic_start_timestamp.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#337
  def monotonic_start_timestamp; end

  # Returns the value of attribute realtime_start_timestamp.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#337
  def realtime_start_timestamp; end

  private

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#392
  def append_event(events, event); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#437
  def monotonic_now; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#433
  def realtime_now; end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#429
  def relative_realtime(realtime_base, monotonic_base); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#419
  def relative_timestamp(timestamp); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#425
  def time_in_nanoseconds(timestamp); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#370
  def trim_links(links, link_count_limit, link_attribute_count_limit); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#347
  def trim_span_attributes(attrs); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#362
  def truncate_attribute_values(attrs, attribute_length_limit); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#341
  def validated_attributes(attrs); end
end

# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#19
OpenTelemetry::SDK::Trace::Span::DEFAULT_STATUS = T.let(T.unsafe(nil), OpenTelemetry::Trace::Status)

# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span.rb#20
OpenTelemetry::SDK::Trace::Span::EMPTY_ATTRIBUTES = T.let(T.unsafe(nil), Hash)

# SpanData is a Struct containing {Span} data for export.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_data.rb#13
class OpenTelemetry::SDK::Trace::SpanData < ::Struct
  # Returns the value of attribute attributes
  #
  # @return [Object] the current value of attributes
  def attributes; end

  # Sets the attribute attributes
  #
  # @param value [Object] the value to set the attribute attributes to.
  # @return [Object] the newly set value
  def attributes=(_); end

  # Returns the value of attribute end_timestamp
  #
  # @return [Object] the current value of end_timestamp
  def end_timestamp; end

  # Sets the attribute end_timestamp
  #
  # @param value [Object] the value to set the attribute end_timestamp to.
  # @return [Object] the newly set value
  def end_timestamp=(_); end

  # Returns the value of attribute events
  #
  # @return [Object] the current value of events
  def events; end

  # Sets the attribute events
  #
  # @param value [Object] the value to set the attribute events to.
  # @return [Object] the newly set value
  def events=(_); end

  # Returns the lowercase [hex encoded](https://tools.ietf.org/html/rfc4648#section-8) parent span ID.
  #
  # @return [String] A 16-hex-character lowercase string.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_data.rb#48
  def hex_parent_span_id; end

  # Returns the lowercase [hex encoded](https://tools.ietf.org/html/rfc4648#section-8) span ID.
  #
  # @return [String] A 16-hex-character lowercase string.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_data.rb#34
  def hex_span_id; end

  # Returns the lowercase [hex encoded](https://tools.ietf.org/html/rfc4648#section-8) trace ID.
  #
  # @return [String] A 32-hex-character lowercase string.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_data.rb#41
  def hex_trace_id; end

  # Returns the value of attribute instrumentation_scope
  # Returns an InstrumentationScope struct, which is backwards compatible with InstrumentationLibrary.
  #
  # @deprecated Please use instrumentation_scope instead.
  # @return [Object] the current value of instrumentation_scope
  # @return InstrumentationScope
  def instrumentation_library; end

  # Returns the value of attribute instrumentation_scope
  #
  # @return [Object] the current value of instrumentation_scope
  def instrumentation_scope; end

  # Sets the attribute instrumentation_scope
  #
  # @param value [Object] the value to set the attribute instrumentation_scope to.
  # @return [Object] the newly set value
  def instrumentation_scope=(_); end

  # Returns the value of attribute kind
  #
  # @return [Object] the current value of kind
  def kind; end

  # Sets the attribute kind
  #
  # @param value [Object] the value to set the attribute kind to.
  # @return [Object] the newly set value
  def kind=(_); end

  # Returns the value of attribute links
  #
  # @return [Object] the current value of links
  def links; end

  # Sets the attribute links
  #
  # @param value [Object] the value to set the attribute links to.
  # @return [Object] the newly set value
  def links=(_); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute parent_span_id
  #
  # @return [Object] the current value of parent_span_id
  def parent_span_id; end

  # Sets the attribute parent_span_id
  #
  # @param value [Object] the value to set the attribute parent_span_id to.
  # @return [Object] the newly set value
  def parent_span_id=(_); end

  # Returns the value of attribute resource
  #
  # @return [Object] the current value of resource
  def resource; end

  # Sets the attribute resource
  #
  # @param value [Object] the value to set the attribute resource to.
  # @return [Object] the newly set value
  def resource=(_); end

  # Returns the value of attribute span_id
  #
  # @return [Object] the current value of span_id
  def span_id; end

  # Sets the attribute span_id
  #
  # @param value [Object] the value to set the attribute span_id to.
  # @return [Object] the newly set value
  def span_id=(_); end

  # Returns the value of attribute start_timestamp
  #
  # @return [Object] the current value of start_timestamp
  def start_timestamp; end

  # Sets the attribute start_timestamp
  #
  # @param value [Object] the value to set the attribute start_timestamp to.
  # @return [Object] the newly set value
  def start_timestamp=(_); end

  # Returns the value of attribute status
  #
  # @return [Object] the current value of status
  def status; end

  # Sets the attribute status
  #
  # @param value [Object] the value to set the attribute status to.
  # @return [Object] the newly set value
  def status=(_); end

  # Returns the value of attribute total_recorded_attributes
  #
  # @return [Object] the current value of total_recorded_attributes
  def total_recorded_attributes; end

  # Sets the attribute total_recorded_attributes
  #
  # @param value [Object] the value to set the attribute total_recorded_attributes to.
  # @return [Object] the newly set value
  def total_recorded_attributes=(_); end

  # Returns the value of attribute total_recorded_events
  #
  # @return [Object] the current value of total_recorded_events
  def total_recorded_events; end

  # Sets the attribute total_recorded_events
  #
  # @param value [Object] the value to set the attribute total_recorded_events to.
  # @return [Object] the newly set value
  def total_recorded_events=(_); end

  # Returns the value of attribute total_recorded_links
  #
  # @return [Object] the current value of total_recorded_links
  def total_recorded_links; end

  # Sets the attribute total_recorded_links
  #
  # @param value [Object] the value to set the attribute total_recorded_links to.
  # @return [Object] the newly set value
  def total_recorded_links=(_); end

  # Returns the value of attribute trace_flags
  #
  # @return [Object] the current value of trace_flags
  def trace_flags; end

  # Sets the attribute trace_flags
  #
  # @param value [Object] the value to set the attribute trace_flags to.
  # @return [Object] the newly set value
  def trace_flags=(_); end

  # Returns the value of attribute trace_id
  #
  # @return [Object] the current value of trace_id
  def trace_id; end

  # Sets the attribute trace_id
  #
  # @param value [Object] the value to set the attribute trace_id to.
  # @return [Object] the newly set value
  def trace_id=(_); end

  # Returns the value of attribute tracestate
  #
  # @return [Object] the current value of tracestate
  def tracestate; end

  # Sets the attribute tracestate
  #
  # @param value [Object] the value to set the attribute tracestate to.
  # @return [Object] the newly set value
  def tracestate=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Class that holds global trace parameters.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_limits.rb#11
class OpenTelemetry::SDK::Trace::SpanLimits
  # Returns a {SpanLimits} with the desired values.
  #
  # @raise [ArgumentError] if any of the max numbers are not positive.
  # @return [SpanLimits] with the desired values.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_limits.rb#37
  def initialize(attribute_count_limit: T.unsafe(nil), attribute_length_limit: T.unsafe(nil), event_count_limit: T.unsafe(nil), link_count_limit: T.unsafe(nil), event_attribute_count_limit: T.unsafe(nil), event_attribute_length_limit: T.unsafe(nil), link_attribute_count_limit: T.unsafe(nil)); end

  # The global default max number of attributes per {Span}.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_limits.rb#13
  def attribute_count_limit; end

  # The global default max length of attribute value per {Span}.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_limits.rb#16
  def attribute_length_limit; end

  # The global default max number of attributes per {OpenTelemetry::SDK::Trace::Event}.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_limits.rb#25
  def event_attribute_count_limit; end

  # The global default max length of attribute value per {OpenTelemetry::SDK::Trace::Event}.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_limits.rb#28
  def event_attribute_length_limit; end

  # The global default max number of {OpenTelemetry::SDK::Trace::Event}s per {Span}.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_limits.rb#19
  def event_count_limit; end

  # The global default max number of attributes per {OpenTelemetry::Trace::Link}.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_limits.rb#31
  def link_attribute_count_limit; end

  # The global default max number of {OpenTelemetry::Trace::Link} entries per {Span}.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_limits.rb#22
  def link_count_limit; end
end

# The default {SpanLimits}.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_limits.rb#63
OpenTelemetry::SDK::Trace::SpanLimits::DEFAULT = T.let(T.unsafe(nil), OpenTelemetry::SDK::Trace::SpanLimits)

# SpanProcessor describes a duck type and provides synchronous no-op hooks for when a
# {Span} is started or when a {Span} is ended. It is not required to subclass this
# class to provide an implementation of SpanProcessor, provided the interface is
# satisfied.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_processor.rb#14
class OpenTelemetry::SDK::Trace::SpanProcessor
  # Export all ended spans to the configured `Exporter` that have not yet
  # been exported.
  #
  # This method should only be called in cases where it is absolutely
  # necessary, such as when using some FaaS providers that may suspend
  # the process after an invocation, but before the `Processor` exports
  # the completed spans.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] Export::SUCCESS if no error occurred, Export::FAILURE if
  #   a non-specific failure occurred, Export::TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_processor.rb#46
  def force_flush(timeout: T.unsafe(nil)); end

  # Called when a {Span} is ended, if the {Span#recording?}
  # returns true.
  #
  # This method is called synchronously on the execution thread, should
  # not throw or block the execution thread.
  #
  # @param span [Span] the {Span} that just ended.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_processor.rb#33
  def on_finish(span); end

  # Called when a {Span} is started, if the {Span#recording?}
  # returns true.
  #
  # This method is called synchronously on the execution thread, should
  # not throw or block the execution thread.
  #
  # @param span [Span] the {Span} that just started.
  # @param parent_context [Context] the parent {Context} of the newly
  #   started span.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_processor.rb#24
  def on_start(span, parent_context); end

  # Called when {TracerProvider#shutdown} is called.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] Export::SUCCESS if no error occurred, Export::FAILURE if
  #   a non-specific failure occurred, Export::TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/span_processor.rb#55
  def shutdown(timeout: T.unsafe(nil)); end
end

# {Tracer} is the SDK implementation of {OpenTelemetry::Trace::Tracer}.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer.rb#11
class OpenTelemetry::SDK::Trace::Tracer < ::OpenTelemetry::Trace::Tracer
  # Returns a new {Tracer} instance.
  #
  # @api private
  # @param name [String] Instrumentation package name
  # @param version [String] Instrumentation package version
  # @param tracer_provider [TracerProvider] TracerProvider that initialized the tracer
  # @return [Tracer]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer.rb#21
  def initialize(name, version, tracer_provider); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer.rb#26
  def start_root_span(name, attributes: T.unsafe(nil), links: T.unsafe(nil), start_timestamp: T.unsafe(nil), kind: T.unsafe(nil)); end

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer.rb#30
  def start_span(name, with_parent: T.unsafe(nil), attributes: T.unsafe(nil), links: T.unsafe(nil), start_timestamp: T.unsafe(nil), kind: T.unsafe(nil)); end
end

# {TracerProvider} is the SDK implementation of {OpenTelemetry::Trace::TracerProvider}.
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#11
class OpenTelemetry::SDK::Trace::TracerProvider < ::OpenTelemetry::Trace::TracerProvider
  # Returns a new {TracerProvider} instance.
  #
  # @param sampler [optional Sampler] The sampling policy for new spans
  # @param resource [optional Resource] The resource to associate with spans
  #   created by Tracers created by this TracerProvider
  # @param id_generator [optional IDGenerator] The trace and span ID generation
  #   policy
  # @param span_limits [optional SpanLimits] The limits to apply to attribute,
  #   event and link counts for Spans created by Tracers created by this
  #   TracerProvider
  # @return [TracerProvider]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#30
  def initialize(sampler: T.unsafe(nil), resource: T.unsafe(nil), id_generator: T.unsafe(nil), span_limits: T.unsafe(nil)); end

  # Adds a new SpanProcessor to this {Tracer}.
  #
  # @param span_processor the new SpanProcessor to be added.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#118
  def add_span_processor(span_processor); end

  # Immediately export all spans that have not yet been exported for all the
  # registered SpanProcessors.
  #
  # This method should only be called in cases where it is absolutely
  # necessary, such as when using some FaaS providers that may suspend
  # the process after an invocation, but before the `Processor` exports
  # the completed spans.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] Export::SUCCESS if no error occurred, Export::FAILURE if
  #   a non-specific failure occurred, Export::TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#100
  def force_flush(timeout: T.unsafe(nil)); end

  # Returns the value of attribute id_generator.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#15
  def id_generator; end

  # Sets the attribute id_generator
  #
  # @param value the value to set the attribute id_generator to.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#15
  def id_generator=(_arg0); end

  # @api private
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#129
  def internal_start_span(name, kind, attributes, links, start_timestamp, parent_context, instrumentation_scope); end

  # Returns the value of attribute resource.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#16
  def resource; end

  # Returns the value of attribute sampler.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#15
  def sampler; end

  # Sets the attribute sampler
  #
  # @param value the value to set the attribute sampler to.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#15
  def sampler=(_arg0); end

  # Attempts to stop all the activity for this {TracerProvider}. Calls
  # SpanProcessor#shutdown for all registered SpanProcessors.
  #
  # This operation may block until all the Spans are processed. Must be
  # called before turning off the main application to ensure all data are
  # processed and exported.
  #
  # After this is called all the newly created {Span}s will be no-op.
  #
  # @param timeout [optional Numeric] An optional timeout in seconds.
  # @return [Integer] Export::SUCCESS if no error occurred, Export::FAILURE if
  #   a non-specific failure occurred, Export::TIMEOUT if a timeout occurred.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#70
  def shutdown(timeout: T.unsafe(nil)); end

  # Returns the value of attribute span_limits.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#15
  def span_limits; end

  # Sets the attribute span_limits
  #
  # @param value the value to set the attribute span_limits to.
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#15
  def span_limits=(_arg0); end

  # Returns a {Tracer} instance.
  #
  # @param name [optional String] Instrumentation package name
  # @param version [optional String] Instrumentation package version
  # @return [Tracer]
  #
  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#51
  def tracer(name = T.unsafe(nil), version = T.unsafe(nil)); end

  private

  # source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#167
  def sampler_from_environment(default_sampler); end
end

# source://opentelemetry-sdk//lib/opentelemetry/sdk/trace/tracer_provider.rb#12
class OpenTelemetry::SDK::Trace::TracerProvider::Key < ::Struct
  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute version
  #
  # @return [Object] the current value of version
  def version; end

  # Sets the attribute version
  #
  # @param value [Object] the value to set the attribute version to.
  # @return [Object] the newly set value
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Current OpenTelemetry version
#
# source://opentelemetry-sdk//lib/opentelemetry/sdk/version.rb#10
OpenTelemetry::SDK::VERSION = T.let(T.unsafe(nil), String)
