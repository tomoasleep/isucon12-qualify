# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-instrumentation-base` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-instrumentation-base`.

# source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#7
module OpenTelemetry
  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#36
  def error_handler; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def error_handler=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#44
  def handle_error(exception: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#30
  def logger; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def logger=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#69
  def propagation; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def propagation=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#64
  def tracer_provider; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#52
  def tracer_provider=(provider); end
end

# The instrumentation module contains functionality to register and install
# instrumentation
#
# source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#8
module OpenTelemetry::Instrumentation
  # source://opentelemetry-registry/0.3.0/lib/opentelemetry/instrumentation.rb#21
  def registry; end
end

# The Base class holds all metadata and configuration for an
# instrumentation. All instrumentation packages should
# include a subclass of +Instrumentation::Base+ that will register
# it with +OpenTelemetry.instrumentation_registry+ and make it available for
# discovery and installation by an SDK.
#
# A typical subclass of Base will provide an install block, a present
# block, and possibly a compatible block. Below is an
# example:
#
# module OpenTelemetry
#   module Instrumentation
#     module Sinatra
#       class Instrumentation < OpenTelemetry::Instrumentation::Base
#         install do |config|
#           # install instrumentation, either by library hook or applying
#           # a monkey patch
#         end
#
#         # determine if the target library is present
#         present do
#           defined?(::Sinatra)
#         end
#
#         # if the target library is present, is it compatible?
#         compatible do
#           Gem::Version.new(Sinatra::VERSION)) > MIN_VERSION
#         end
#       end
#     end
#   end
# end
#
# The instrumentation name and version will be inferred from the namespace of the
# class. In this example, they'd be 'OpenTelemetry::Instrumentation::Sinatra' and
# OpenTelemetry::Instrumentation::Sinatra::VERSION, but can be explicitly set using
# the +instrumentation_name+ and +instrumetation_version+ methods if necessary.
#
# All subclasses of OpenTelemetry::Instrumentation::Base are automatically
# registered with OpenTelemetry.instrumentation_registry which is used by
# SDKs for instrumentation discovery and installation.
#
# Instrumentation libraries can use the instrumentation subclass to easily gain
# a reference to its named tracer. For example:
#
# OpenTelemetry::Instrumentation::Sinatra.instance.tracer
#
# The instrumention class establishes a convention for disabling an instrumentation
# by environment variable and local configuration. An instrumentation disabled
# by environment variable will take precedence over local config. The
# convention for environment variable name is the library name, upcased with
# '::' replaced by underscores, OPENTELEMETRY shortened to OTEL_{LANG}, and '_ENABLED' appended.
# For example: OTEL_RUBY_INSTRUMENTATION_SINATRA_ENABLED = false.
#
# source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#62
class OpenTelemetry::Instrumentation::Base
  # @return [Base] a new instance of Base
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#197
  def initialize(name, version, install_blk, present_blk, compatible_blk, options); end

  # Calls the compatible block of the Instrumentation subclasses, if no block is provided
  # it's assumed to be compatible
  #
  # @return [Boolean]
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#246
  def compatible?; end

  # Returns the value of attribute config.
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#192
  def config; end

  # Whether this instrumentation is enabled. It first checks to see if it's enabled
  # by an environment variable and will proceed to check if it's enabled
  # by local config, if given.
  #
  # @param config [optional Hash] The local config
  # @return [Boolean]
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#257
  def enabled?(config = T.unsafe(nil)); end

  # Install instrumentation with the given config. The present? and compatible?
  # will be run first, and install will return false if either fail. Will
  # return true if install was completed successfully.
  #
  # @param config [Hash] The config for this instrumentation
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#216
  def install(config = T.unsafe(nil)); end

  # Whether or not this instrumentation is installable in the current process. Will
  # be true when the instrumentation defines an install block, is not disabled
  # by environment or config, and the target library present and compatible.
  #
  # @param config [Hash] The config for this instrumentation
  # @return [Boolean]
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#232
  def installable?(config = T.unsafe(nil)); end

  # Returns the value of attribute installed.
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#192
  def installed; end

  # Returns the value of attribute installed.
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#192
  def installed?; end

  # Returns the value of attribute name.
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#192
  def name; end

  # Calls the present block of the Instrumentation subclasses, if no block is provided
  # it's assumed the instrumentation is not present
  #
  # @return [Boolean]
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#238
  def present?; end

  # Returns the value of attribute tracer.
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#192
  def tracer; end

  # Returns the value of attribute version.
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#192
  def version; end

  private

  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#351
  def coerce_env_var(env_var, validation_type); end

  # The config_options method is responsible for validating that the user supplied
  # config hash is valid.
  # Unknown configuration keys are not included in the final config hash.
  # Invalid configuration values are logged, and replaced by the default.
  #
  # @param user_config [Hash] The user supplied configuration hash
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#272
  def config_options(user_config); end

  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#329
  def config_overrides_from_env; end

  # Checks to see if this instrumentation is enabled by env var. By convention, the
  # environment variable will be the instrumentation name upper cased, with '::'
  # replaced by underscores, OPENTELEMETRY shortened to OTEL_{LANG} and _ENABLED appended.
  # For example, the, environment variable name for OpenTelemetry::Instrumentation::Sinatra
  # will be OTEL_RUBY_INSTRUMENTATION_SINATRA_ENABLED. A value of 'false' will disable
  # the instrumentation, all other values will enable it.
  #
  # @return [Boolean]
  #
  # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#319
  def enabled_by_env_var?; end

  class << self
    # The compatible block for this instrumentation. This check will be run if the
    # target library is present to determine if it's compatible. It's not
    # required, but a common use case will be to check to target library
    # version for compatibility.
    #
    # @param blk [Callable] The compatibility block for this instrumentation
    #
    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#136
    def compatible(&blk); end

    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#77
    def inherited(subclass); end

    # The install block for this instrumentation. This will be where you install
    # instrumentation, either by framework hook or applying a monkey patch.
    #
    # @param blk [Callable] The install block for this instrumentation
    # @yieldparam config [Hash] The instrumentation config will be yielded to the
    #   install block
    #
    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#116
    def install(&blk); end

    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#165
    def instance; end

    # Optionally set the name of this instrumentation. If not
    # explicitly set, the name will default to the namespace of the class,
    # or the class name if it does not have a namespace. If there is not
    # a namespace, or a class name, it will default to 'unknown'.
    #
    # @param instrumentation_name [String] The full name of the instrumentation package
    #
    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#87
    def instrumentation_name(instrumentation_name = T.unsafe(nil)); end

    # Optionally set the version of this instrumentation. If not explicitly set,
    # the version will default to the VERSION constant under namespace of
    # the class, or the VERSION constant under the class name if it does not
    # have a namespace. If a VERSION constant cannot be found, it defaults
    # to '0.0.0'.
    #
    # @param instrumentation_version [String] The version of the instrumentation package
    #
    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#102
    def instrumentation_version(instrumentation_version = T.unsafe(nil)); end

    # The option method is used to define default configuration options
    # for the instrumentation library. It requires a name, default value,
    # and a validation callable to be provided.
    # a key in the VALIDATORS hash.  The supported keys are, :array, :boolean,
    # :callable, :integer, :string.
    #
    # @param name [String] The name of the configuration option
    # @param default The default value to be used, or to used if validation fails
    # @param validate [Callable, Symbol] Accepts a callable or a symbol that matches
    # @raise [ArgumentError]
    #
    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#148
    def option(name, default:, validate:); end

    # The present block for this instrumentation. This block is used to detect if
    # target library is present on the system. Typically this will involve
    # checking to see if the target gem spec was loaded or if expected
    # constants from the target library are present.
    #
    # @param blk [Callable] The present block for this instrumentation
    #
    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#126
    def present(&blk); end

    private

    # Returns the value of attribute compatible_blk.
    #
    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#172
    def compatible_blk; end

    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#174
    def infer_name; end

    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#180
    def infer_version; end

    # Returns the value of attribute install_blk.
    #
    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#172
    def install_blk; end

    def new(*_arg0); end

    # Returns the value of attribute options.
    #
    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#172
    def options; end

    # Returns the value of attribute present_blk.
    #
    # source://opentelemetry-instrumentation-base//lib/opentelemetry/instrumentation/base.rb#172
    def present_blk; end
  end
end
