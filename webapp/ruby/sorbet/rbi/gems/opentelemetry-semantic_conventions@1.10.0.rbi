# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-semantic_conventions` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-semantic_conventions`.

# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions.rb#7
module OpenTelemetry
  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#36
  def error_handler; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def error_handler=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#44
  def handle_error(exception: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#30
  def logger; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def logger=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#69
  def propagation; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def propagation=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#64
  def tracer_provider; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#52
  def tracer_provider=(provider); end
end

# Auto-generated semantic convention constants.
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions.rb#9
module OpenTelemetry::SemanticConventions; end

# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#9
module OpenTelemetry::SemanticConventions::Resource; end

# The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#32
OpenTelemetry::SemanticConventions::Resource::AWS_ECS_CLUSTER_ARN = T.let(T.unsafe(nil), String)

# The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#29
OpenTelemetry::SemanticConventions::Resource::AWS_ECS_CONTAINER_ARN = T.let(T.unsafe(nil), String)

# The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#35
OpenTelemetry::SemanticConventions::Resource::AWS_ECS_LAUNCHTYPE = T.let(T.unsafe(nil), String)

# The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#38
OpenTelemetry::SemanticConventions::Resource::AWS_ECS_TASK_ARN = T.let(T.unsafe(nil), String)

# The task definition family this task definition is a member of
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#41
OpenTelemetry::SemanticConventions::Resource::AWS_ECS_TASK_FAMILY = T.let(T.unsafe(nil), String)

# The revision for this task definition
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#44
OpenTelemetry::SemanticConventions::Resource::AWS_ECS_TASK_REVISION = T.let(T.unsafe(nil), String)

# The ARN of an EKS cluster
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#47
OpenTelemetry::SemanticConventions::Resource::AWS_EKS_CLUSTER_ARN = T.let(T.unsafe(nil), String)

# The Amazon Resource Name(s) (ARN) of the AWS log group(s)
#
# @note See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#55
OpenTelemetry::SemanticConventions::Resource::AWS_LOG_GROUP_ARNS = T.let(T.unsafe(nil), String)

# The name(s) of the AWS log group(s) an application is writing to
#
# @note Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#51
OpenTelemetry::SemanticConventions::Resource::AWS_LOG_GROUP_NAMES = T.let(T.unsafe(nil), String)

# The ARN(s) of the AWS log stream(s)
#
# @note See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#62
OpenTelemetry::SemanticConventions::Resource::AWS_LOG_STREAM_ARNS = T.let(T.unsafe(nil), String)

# The name(s) of the AWS log stream(s) an application is writing to
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#58
OpenTelemetry::SemanticConventions::Resource::AWS_LOG_STREAM_NAMES = T.let(T.unsafe(nil), String)

# The cloud account ID the resource is assigned to
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#14
OpenTelemetry::SemanticConventions::Resource::CLOUD_ACCOUNT_ID = T.let(T.unsafe(nil), String)

# Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running
#
# @note Availability zones are called "zones" on Alibaba Cloud and Google Cloud
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#22
OpenTelemetry::SemanticConventions::Resource::CLOUD_AVAILABILITY_ZONE = T.let(T.unsafe(nil), String)

# The cloud platform in use
#
# @note The prefix of the service SHOULD match the one specified in `cloud.provider`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#26
OpenTelemetry::SemanticConventions::Resource::CLOUD_PLATFORM = T.let(T.unsafe(nil), String)

# Name of the cloud provider
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#11
OpenTelemetry::SemanticConventions::Resource::CLOUD_PROVIDER = T.let(T.unsafe(nil), String)

# The geographical region the resource is running
#
# @note Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://intl.cloud.tencent.com/document/product/213/6091)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#18
OpenTelemetry::SemanticConventions::Resource::CLOUD_REGION = T.let(T.unsafe(nil), String)

# Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#68
OpenTelemetry::SemanticConventions::Resource::CONTAINER_ID = T.let(T.unsafe(nil), String)

# Name of the image the container was built on
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#74
OpenTelemetry::SemanticConventions::Resource::CONTAINER_IMAGE_NAME = T.let(T.unsafe(nil), String)

# Container image tag
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#77
OpenTelemetry::SemanticConventions::Resource::CONTAINER_IMAGE_TAG = T.let(T.unsafe(nil), String)

# Container name used by container runtime
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#65
OpenTelemetry::SemanticConventions::Resource::CONTAINER_NAME = T.let(T.unsafe(nil), String)

# The container runtime managing this container
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#71
OpenTelemetry::SemanticConventions::Resource::CONTAINER_RUNTIME = T.let(T.unsafe(nil), String)

# Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#80
OpenTelemetry::SemanticConventions::Resource::DEPLOYMENT_ENVIRONMENT = T.let(T.unsafe(nil), String)

# A unique identifier representing the device
#
# @note The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#84
OpenTelemetry::SemanticConventions::Resource::DEVICE_ID = T.let(T.unsafe(nil), String)

# The name of the device manufacturer
#
# @note The Android OS provides this field via [Build](https://developer.android.com/reference/android/os/Build#MANUFACTURER). iOS apps SHOULD hardcode the value `Apple`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#96
OpenTelemetry::SemanticConventions::Resource::DEVICE_MANUFACTURER = T.let(T.unsafe(nil), String)

# The model identifier for the device
#
# @note It's recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#88
OpenTelemetry::SemanticConventions::Resource::DEVICE_MODEL_IDENTIFIER = T.let(T.unsafe(nil), String)

# The marketing name for the device model
#
# @note It's recommended this value represents a human readable version of the device model rather than a machine readable alternative
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#92
OpenTelemetry::SemanticConventions::Resource::DEVICE_MODEL_NAME = T.let(T.unsafe(nil), String)

# The unique ID of the single function that this runtime instance executes
#
# @note Depending on the cloud provider, use:
#
#   * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
#   Take care not to use the "invoked ARN" directly but replace any
#   [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple
#   different aliases.
#   * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
#   * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).
#
#   On some providers, it may not be possible to determine the full ID at startup,
#   which is why this field cannot be made required. For example, on AWS the account ID
#   part of the ARN is not available without calling another AWS API
#   which may be deemed too slow for a short-running lambda function.
#   As an alternative, consider setting `faas.id` as a span attribute instead
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#117
OpenTelemetry::SemanticConventions::Resource::FAAS_ID = T.let(T.unsafe(nil), String)

# The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version
#
# @note * **AWS Lambda:** Use the (full) log stream name
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#133
OpenTelemetry::SemanticConventions::Resource::FAAS_INSTANCE = T.let(T.unsafe(nil), String)

# The amount of memory available to the serverless function in MiB
#
# @note It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#137
OpenTelemetry::SemanticConventions::Resource::FAAS_MAX_MEMORY = T.let(T.unsafe(nil), String)

# The name of the single function that this runtime instance executes
#
# @note This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#100
OpenTelemetry::SemanticConventions::Resource::FAAS_NAME = T.let(T.unsafe(nil), String)

# The immutable version of the function being executed
#
# @note Depending on the cloud provider and platform, use:
#
#   * **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)
#   (an integer represented as a decimal string).
#   * **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)
#   (i.e., the function name plus the revision suffix).
#   * **Google Cloud Functions:** The value of the
#   [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).
#   * **Azure Functions:** Not applicable. Do not set this attribute
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#129
OpenTelemetry::SemanticConventions::Resource::FAAS_VERSION = T.let(T.unsafe(nil), String)

# The CPU architecture the host system is running on
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#149
OpenTelemetry::SemanticConventions::Resource::HOST_ARCH = T.let(T.unsafe(nil), String)

# Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#140
OpenTelemetry::SemanticConventions::Resource::HOST_ID = T.let(T.unsafe(nil), String)

# VM image ID. For Cloud, this value is from the provider
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#155
OpenTelemetry::SemanticConventions::Resource::HOST_IMAGE_ID = T.let(T.unsafe(nil), String)

# Name of the VM image or OS install the host was instantiated from
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#152
OpenTelemetry::SemanticConventions::Resource::HOST_IMAGE_NAME = T.let(T.unsafe(nil), String)

# The version string of the VM image as defined in [Version Attributes](README.md#version-attributes)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#158
OpenTelemetry::SemanticConventions::Resource::HOST_IMAGE_VERSION = T.let(T.unsafe(nil), String)

# Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#143
OpenTelemetry::SemanticConventions::Resource::HOST_NAME = T.let(T.unsafe(nil), String)

# Type of host. For Cloud, this must be the machine type
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#146
OpenTelemetry::SemanticConventions::Resource::HOST_TYPE = T.let(T.unsafe(nil), String)

# The name of the cluster
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#161
OpenTelemetry::SemanticConventions::Resource::K8S_CLUSTER_NAME = T.let(T.unsafe(nil), String)

# The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#179
OpenTelemetry::SemanticConventions::Resource::K8S_CONTAINER_NAME = T.let(T.unsafe(nil), String)

# Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#182
OpenTelemetry::SemanticConventions::Resource::K8S_CONTAINER_RESTART_COUNT = T.let(T.unsafe(nil), String)

# The name of the CronJob
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#218
OpenTelemetry::SemanticConventions::Resource::K8S_CRONJOB_NAME = T.let(T.unsafe(nil), String)

# The UID of the CronJob
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#215
OpenTelemetry::SemanticConventions::Resource::K8S_CRONJOB_UID = T.let(T.unsafe(nil), String)

# The name of the DaemonSet
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#206
OpenTelemetry::SemanticConventions::Resource::K8S_DAEMONSET_NAME = T.let(T.unsafe(nil), String)

# The UID of the DaemonSet
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#203
OpenTelemetry::SemanticConventions::Resource::K8S_DAEMONSET_UID = T.let(T.unsafe(nil), String)

# The name of the Deployment
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#194
OpenTelemetry::SemanticConventions::Resource::K8S_DEPLOYMENT_NAME = T.let(T.unsafe(nil), String)

# The UID of the Deployment
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#191
OpenTelemetry::SemanticConventions::Resource::K8S_DEPLOYMENT_UID = T.let(T.unsafe(nil), String)

# The name of the Job
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#212
OpenTelemetry::SemanticConventions::Resource::K8S_JOB_NAME = T.let(T.unsafe(nil), String)

# The UID of the Job
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#209
OpenTelemetry::SemanticConventions::Resource::K8S_JOB_UID = T.let(T.unsafe(nil), String)

# The name of the namespace that the pod is running in
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#170
OpenTelemetry::SemanticConventions::Resource::K8S_NAMESPACE_NAME = T.let(T.unsafe(nil), String)

# The name of the Node
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#164
OpenTelemetry::SemanticConventions::Resource::K8S_NODE_NAME = T.let(T.unsafe(nil), String)

# The UID of the Node
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#167
OpenTelemetry::SemanticConventions::Resource::K8S_NODE_UID = T.let(T.unsafe(nil), String)

# The name of the Pod
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#176
OpenTelemetry::SemanticConventions::Resource::K8S_POD_NAME = T.let(T.unsafe(nil), String)

# The UID of the Pod
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#173
OpenTelemetry::SemanticConventions::Resource::K8S_POD_UID = T.let(T.unsafe(nil), String)

# The name of the ReplicaSet
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#188
OpenTelemetry::SemanticConventions::Resource::K8S_REPLICASET_NAME = T.let(T.unsafe(nil), String)

# The UID of the ReplicaSet
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#185
OpenTelemetry::SemanticConventions::Resource::K8S_REPLICASET_UID = T.let(T.unsafe(nil), String)

# The name of the StatefulSet
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#200
OpenTelemetry::SemanticConventions::Resource::K8S_STATEFULSET_NAME = T.let(T.unsafe(nil), String)

# The UID of the StatefulSet
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#197
OpenTelemetry::SemanticConventions::Resource::K8S_STATEFULSET_UID = T.let(T.unsafe(nil), String)

# Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#224
OpenTelemetry::SemanticConventions::Resource::OS_DESCRIPTION = T.let(T.unsafe(nil), String)

# Human readable operating system name
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#227
OpenTelemetry::SemanticConventions::Resource::OS_NAME = T.let(T.unsafe(nil), String)

# The operating system type
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#221
OpenTelemetry::SemanticConventions::Resource::OS_TYPE = T.let(T.unsafe(nil), String)

# The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#230
OpenTelemetry::SemanticConventions::Resource::OS_VERSION = T.let(T.unsafe(nil), String)

# The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#242
OpenTelemetry::SemanticConventions::Resource::PROCESS_COMMAND = T.let(T.unsafe(nil), String)

# All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#248
OpenTelemetry::SemanticConventions::Resource::PROCESS_COMMAND_ARGS = T.let(T.unsafe(nil), String)

# The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#245
OpenTelemetry::SemanticConventions::Resource::PROCESS_COMMAND_LINE = T.let(T.unsafe(nil), String)

# The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#236
OpenTelemetry::SemanticConventions::Resource::PROCESS_EXECUTABLE_NAME = T.let(T.unsafe(nil), String)

# The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#239
OpenTelemetry::SemanticConventions::Resource::PROCESS_EXECUTABLE_PATH = T.let(T.unsafe(nil), String)

# The username of the user that owns the process
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#251
OpenTelemetry::SemanticConventions::Resource::PROCESS_OWNER = T.let(T.unsafe(nil), String)

# Process identifier (PID)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#233
OpenTelemetry::SemanticConventions::Resource::PROCESS_PID = T.let(T.unsafe(nil), String)

# An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#260
OpenTelemetry::SemanticConventions::Resource::PROCESS_RUNTIME_DESCRIPTION = T.let(T.unsafe(nil), String)

# The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#254
OpenTelemetry::SemanticConventions::Resource::PROCESS_RUNTIME_NAME = T.let(T.unsafe(nil), String)

# The version of the runtime of this process, as returned by the runtime without modification
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#257
OpenTelemetry::SemanticConventions::Resource::PROCESS_RUNTIME_VERSION = T.let(T.unsafe(nil), String)

# The string ID of the service instance
#
# @note MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#272
OpenTelemetry::SemanticConventions::Resource::SERVICE_INSTANCE_ID = T.let(T.unsafe(nil), String)

# Logical name of the service
#
# @note MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#264
OpenTelemetry::SemanticConventions::Resource::SERVICE_NAME = T.let(T.unsafe(nil), String)

# A namespace for `service.name`
#
# @note A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#268
OpenTelemetry::SemanticConventions::Resource::SERVICE_NAMESPACE = T.let(T.unsafe(nil), String)

# The version string of the service API or implementation
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#275
OpenTelemetry::SemanticConventions::Resource::SERVICE_VERSION = T.let(T.unsafe(nil), String)

# The version string of the auto instrumentation agent, if used
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#287
OpenTelemetry::SemanticConventions::Resource::TELEMETRY_AUTO_VERSION = T.let(T.unsafe(nil), String)

# The language of the telemetry SDK
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#281
OpenTelemetry::SemanticConventions::Resource::TELEMETRY_SDK_LANGUAGE = T.let(T.unsafe(nil), String)

# The name of the telemetry SDK as defined above
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#278
OpenTelemetry::SemanticConventions::Resource::TELEMETRY_SDK_NAME = T.let(T.unsafe(nil), String)

# The version string of the telemetry SDK
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#284
OpenTelemetry::SemanticConventions::Resource::TELEMETRY_SDK_VERSION = T.let(T.unsafe(nil), String)

# Additional description of the web engine (e.g. detailed version and edition information)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#296
OpenTelemetry::SemanticConventions::Resource::WEBENGINE_DESCRIPTION = T.let(T.unsafe(nil), String)

# The name of the web engine
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#290
OpenTelemetry::SemanticConventions::Resource::WEBENGINE_NAME = T.let(T.unsafe(nil), String)

# The version of the web engine
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/resource.rb#293
OpenTelemetry::SemanticConventions::Resource::WEBENGINE_VERSION = T.let(T.unsafe(nil), String)

# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#9
module OpenTelemetry::SemanticConventions::Trace; end

# The value of the `AttributesToGet` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#370
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_ATTRIBUTES_TO_GET = T.let(T.unsafe(nil), String)

# The JSON-serialized value of each item in the `AttributeDefinitions` request field
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#406
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = T.let(T.unsafe(nil), String)

# The value of the `ConsistentRead` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#361
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_CONSISTENT_READ = T.let(T.unsafe(nil), String)

# The JSON-serialized value of each item in the `ConsumedCapacity` response field
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#349
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_CONSUMED_CAPACITY = T.let(T.unsafe(nil), String)

# The value of the `Count` response parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#400
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_COUNT = T.let(T.unsafe(nil), String)

# The value of the `ExclusiveStartTableName` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#385
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_EXCLUSIVE_START_TABLE = T.let(T.unsafe(nil), String)

# The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#379
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = T.let(T.unsafe(nil), String)

# The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#409
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = T.let(T.unsafe(nil), String)

# The value of the `IndexName` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#373
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_INDEX_NAME = T.let(T.unsafe(nil), String)

# The JSON-serialized value of the `ItemCollectionMetrics` response field
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#352
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_ITEM_COLLECTION_METRICS = T.let(T.unsafe(nil), String)

# The value of the `Limit` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#367
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_LIMIT = T.let(T.unsafe(nil), String)

# The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#382
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = T.let(T.unsafe(nil), String)

# The value of the `ProjectionExpression` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#364
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_PROJECTION = T.let(T.unsafe(nil), String)

# The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#355
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = T.let(T.unsafe(nil), String)

# The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#358
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = T.let(T.unsafe(nil), String)

# The value of the `ScannedCount` response parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#403
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_SCANNED_COUNT = T.let(T.unsafe(nil), String)

# The value of the `ScanIndexForward` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#391
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_SCAN_FORWARD = T.let(T.unsafe(nil), String)

# The value of the `Segment` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#394
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_SEGMENT = T.let(T.unsafe(nil), String)

# The value of the `Select` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#376
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_SELECT = T.let(T.unsafe(nil), String)

# The the number of items in the `TableNames` response parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#388
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_TABLE_COUNT = T.let(T.unsafe(nil), String)

# The keys in the `RequestItems` object field
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#346
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_TABLE_NAMES = T.let(T.unsafe(nil), String)

# The value of the `TotalSegments` request parameter
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#397
OpenTelemetry::SemanticConventions::Trace::AWS_DYNAMODB_TOTAL_SEGMENTS = T.let(T.unsafe(nil), String)

# The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable)
#
# @note This may be different from `faas.id` if an alias is involved
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#12
OpenTelemetry::SemanticConventions::Trace::AWS_LAMBDA_INVOKED_ARN = T.let(T.unsafe(nil), String)

# The [event_id](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id) uniquely identifies the event
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#15
OpenTelemetry::SemanticConventions::Trace::CLOUDEVENTS_EVENT_ID = T.let(T.unsafe(nil), String)

# The [source](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) identifies the context in which an event happened
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#18
OpenTelemetry::SemanticConventions::Trace::CLOUDEVENTS_EVENT_SOURCE = T.let(T.unsafe(nil), String)

# The [version of the CloudEvents specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion) which the event uses
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#21
OpenTelemetry::SemanticConventions::Trace::CLOUDEVENTS_EVENT_SPEC_VERSION = T.let(T.unsafe(nil), String)

# The [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) of the event in the context of the event producer (identified by source)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#27
OpenTelemetry::SemanticConventions::Trace::CLOUDEVENTS_EVENT_SUBJECT = T.let(T.unsafe(nil), String)

# The [event_type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) contains a value describing the type of event related to the originating occurrence
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#24
OpenTelemetry::SemanticConventions::Trace::CLOUDEVENTS_EVENT_TYPE = T.let(T.unsafe(nil), String)

# The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#329
OpenTelemetry::SemanticConventions::Trace::CODE_FILEPATH = T.let(T.unsafe(nil), String)

# The method or function name, or equivalent (usually rightmost part of the code unit's name)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#323
OpenTelemetry::SemanticConventions::Trace::CODE_FUNCTION = T.let(T.unsafe(nil), String)

# The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#332
OpenTelemetry::SemanticConventions::Trace::CODE_LINENO = T.let(T.unsafe(nil), String)

# The "namespace" within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#326
OpenTelemetry::SemanticConventions::Trace::CODE_NAMESPACE = T.let(T.unsafe(nil), String)

# The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#77
OpenTelemetry::SemanticConventions::Trace::DB_CASSANDRA_CONSISTENCY_LEVEL = T.let(T.unsafe(nil), String)

# The data center of the coordinating node for a query
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#93
OpenTelemetry::SemanticConventions::Trace::DB_CASSANDRA_COORDINATOR_DC = T.let(T.unsafe(nil), String)

# The ID of the coordinating node for a query
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#90
OpenTelemetry::SemanticConventions::Trace::DB_CASSANDRA_COORDINATOR_ID = T.let(T.unsafe(nil), String)

# Whether or not the query is idempotent
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#84
OpenTelemetry::SemanticConventions::Trace::DB_CASSANDRA_IDEMPOTENCE = T.let(T.unsafe(nil), String)

# The fetch size used for paging, i.e. how many rows will be returned at once
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#74
OpenTelemetry::SemanticConventions::Trace::DB_CASSANDRA_PAGE_SIZE = T.let(T.unsafe(nil), String)

# The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#87
OpenTelemetry::SemanticConventions::Trace::DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = T.let(T.unsafe(nil), String)

# The name of the primary table that the operation is acting upon, including the keyspace name (if applicable)
#
# @note This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#81
OpenTelemetry::SemanticConventions::Trace::DB_CASSANDRA_TABLE = T.let(T.unsafe(nil), String)

# The connection string used to connect to the database. It is recommended to remove embedded credentials
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#37
OpenTelemetry::SemanticConventions::Trace::DB_CONNECTION_STRING = T.let(T.unsafe(nil), String)

# The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#43
OpenTelemetry::SemanticConventions::Trace::DB_JDBC_DRIVER_CLASSNAME = T.let(T.unsafe(nil), String)

# The collection being accessed within the database stated in `db.name`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#99
OpenTelemetry::SemanticConventions::Trace::DB_MONGODB_COLLECTION = T.let(T.unsafe(nil), String)

# The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance
#
# @note If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#71
OpenTelemetry::SemanticConventions::Trace::DB_MSSQL_INSTANCE_NAME = T.let(T.unsafe(nil), String)

# This attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails)
#
# @note In some SQL databases, the database name to be used is called "schema name". In case there are multiple layers that could be considered for database name (e.g. Oracle instance name and schema name), the database name to be used is the more specific layer (e.g. Oracle schema name)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#47
OpenTelemetry::SemanticConventions::Trace::DB_NAME = T.let(T.unsafe(nil), String)

# The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword
#
# @note When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#55
OpenTelemetry::SemanticConventions::Trace::DB_OPERATION = T.let(T.unsafe(nil), String)

# The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#96
OpenTelemetry::SemanticConventions::Trace::DB_REDIS_DATABASE_INDEX = T.let(T.unsafe(nil), String)

# The name of the primary table that the operation is acting upon, including the database name (if applicable)
#
# @note It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#103
OpenTelemetry::SemanticConventions::Trace::DB_SQL_TABLE = T.let(T.unsafe(nil), String)

# The database statement being executed
#
# @note The value may be sanitized to exclude sensitive information
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#51
OpenTelemetry::SemanticConventions::Trace::DB_STATEMENT = T.let(T.unsafe(nil), String)

# An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#34
OpenTelemetry::SemanticConventions::Trace::DB_SYSTEM = T.let(T.unsafe(nil), String)

# Username for accessing the database
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#40
OpenTelemetry::SemanticConventions::Trace::DB_USER = T.let(T.unsafe(nil), String)

# Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#308
OpenTelemetry::SemanticConventions::Trace::ENDUSER_ID = T.let(T.unsafe(nil), String)

# Actual/assumed role the client is making the request under extracted from token or application security context
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#311
OpenTelemetry::SemanticConventions::Trace::ENDUSER_ROLE = T.let(T.unsafe(nil), String)

# Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#314
OpenTelemetry::SemanticConventions::Trace::ENDUSER_SCOPE = T.let(T.unsafe(nil), String)

# SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span
#
# @note An exception is considered to have escaped (or left) the scope of a span,
#   if that span is ended while the exception is still logically "in flight".
#   This may be actually "in flight" in some languages (e.g. if the exception
#   is passed to a Context manager's `__exit__` method in Python) but will
#   usually be caught at the point of recording the exception in most languages.
#
#   It is usually not possible to determine at the point where an exception is thrown
#   whether it will escape the scope of a span.
#   However, it is trivial to know that an exception
#   will escape, if one checks for an active exception just before ending the span,
#   as done in the [example above](#recording-an-exception).
#
#   It follows that an exception may still escape the scope of the span
#   even if the `exception.escaped` attribute was not set or set to false,
#   since the event might have been recorded at a time where it was not
#   clear whether the exception will escape
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#131
OpenTelemetry::SemanticConventions::Trace::EXCEPTION_ESCAPED = T.let(T.unsafe(nil), String)

# The exception message
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#109
OpenTelemetry::SemanticConventions::Trace::EXCEPTION_MESSAGE = T.let(T.unsafe(nil), String)

# A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#112
OpenTelemetry::SemanticConventions::Trace::EXCEPTION_STACKTRACE = T.let(T.unsafe(nil), String)

# The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#106
OpenTelemetry::SemanticConventions::Trace::EXCEPTION_TYPE = T.let(T.unsafe(nil), String)

# A boolean that is true if the serverless function is executed for the first time (aka cold-start)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#290
OpenTelemetry::SemanticConventions::Trace::FAAS_COLDSTART = T.let(T.unsafe(nil), String)

# A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#287
OpenTelemetry::SemanticConventions::Trace::FAAS_CRON = T.let(T.unsafe(nil), String)

# The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#149
OpenTelemetry::SemanticConventions::Trace::FAAS_DOCUMENT_COLLECTION = T.let(T.unsafe(nil), String)

# The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#158
OpenTelemetry::SemanticConventions::Trace::FAAS_DOCUMENT_NAME = T.let(T.unsafe(nil), String)

# Describes the type of the operation that was performed on the data
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#152
OpenTelemetry::SemanticConventions::Trace::FAAS_DOCUMENT_OPERATION = T.let(T.unsafe(nil), String)

# A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#155
OpenTelemetry::SemanticConventions::Trace::FAAS_DOCUMENT_TIME = T.let(T.unsafe(nil), String)

# The execution ID of the current function execution
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#146
OpenTelemetry::SemanticConventions::Trace::FAAS_EXECUTION = T.let(T.unsafe(nil), String)

# The name of the invoked function
#
# @note SHOULD be equal to the `faas.name` resource attribute of the invoked function
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#294
OpenTelemetry::SemanticConventions::Trace::FAAS_INVOKED_NAME = T.let(T.unsafe(nil), String)

# The cloud provider of the invoked function
#
# @note SHOULD be equal to the `cloud.provider` resource attribute of the invoked function
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#298
OpenTelemetry::SemanticConventions::Trace::FAAS_INVOKED_PROVIDER = T.let(T.unsafe(nil), String)

# The cloud region of the invoked function
#
# @note SHOULD be equal to the `cloud.region` resource attribute of the invoked function
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#302
OpenTelemetry::SemanticConventions::Trace::FAAS_INVOKED_REGION = T.let(T.unsafe(nil), String)

# A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#284
OpenTelemetry::SemanticConventions::Trace::FAAS_TIME = T.let(T.unsafe(nil), String)

# Type of the trigger which caused this function execution
#
# @note For the server/consumer span on the incoming side,
#   `faas.trigger` MUST be set.
#
#   Clients invoking FaaS instances usually cannot set `faas.trigger`,
#   since they would typically need to look in the payload to determine
#   the event type. If clients set it, it should be the same as the
#   trigger that corresponding incoming would have (i.e., this has
#   nothing to do with the underlying transport used to make the API
#   call to invoke the lambda, which is often HTTP)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#143
OpenTelemetry::SemanticConventions::Trace::FAAS_TRIGGER = T.let(T.unsafe(nil), String)

# The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For))
#
# @note This is not necessarily the same as `net.peer.ip`, which would
#   identify the network-level peer, which may be a proxy.
#
#   This attribute should be set when a source of information different
#   from the one used for `net.peer.ip`, is available even if that other
#   source just confirms the same value as `net.peer.ip`.
#   Rationale: For `net.peer.ip`, one typically does not know if it
#   comes from a proxy, reverse proxy, or the actual client. Setting
#   `http.client_ip` when it's the same as `net.peer.ip` means that
#   one is at least somewhat confident that the address is not that of
#   the closest proxy
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#221
OpenTelemetry::SemanticConventions::Trace::HTTP_CLIENT_IP = T.let(T.unsafe(nil), String)

# Kind of HTTP protocol used
#
# @note If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#182
OpenTelemetry::SemanticConventions::Trace::HTTP_FLAVOR = T.let(T.unsafe(nil), String)

# The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note
#
# @note When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#172
OpenTelemetry::SemanticConventions::Trace::HTTP_HOST = T.let(T.unsafe(nil), String)

# HTTP request method
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#161
OpenTelemetry::SemanticConventions::Trace::HTTP_METHOD = T.let(T.unsafe(nil), String)

# The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#188
OpenTelemetry::SemanticConventions::Trace::HTTP_REQUEST_CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#191
OpenTelemetry::SemanticConventions::Trace::HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = T.let(T.unsafe(nil), String)

# The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#194
OpenTelemetry::SemanticConventions::Trace::HTTP_RESPONSE_CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#197
OpenTelemetry::SemanticConventions::Trace::HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = T.let(T.unsafe(nil), String)

# The ordinal number of request re-sending attempt
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#200
OpenTelemetry::SemanticConventions::Trace::HTTP_RETRY_COUNT = T.let(T.unsafe(nil), String)

# The matched route (path template)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#207
OpenTelemetry::SemanticConventions::Trace::HTTP_ROUTE = T.let(T.unsafe(nil), String)

# The URI scheme identifying the used protocol
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#175
OpenTelemetry::SemanticConventions::Trace::HTTP_SCHEME = T.let(T.unsafe(nil), String)

# The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead)
#
# @note `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#204
OpenTelemetry::SemanticConventions::Trace::HTTP_SERVER_NAME = T.let(T.unsafe(nil), String)

# [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#178
OpenTelemetry::SemanticConventions::Trace::HTTP_STATUS_CODE = T.let(T.unsafe(nil), String)

# The full request target as passed in a HTTP request line or equivalent
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#168
OpenTelemetry::SemanticConventions::Trace::HTTP_TARGET = T.let(T.unsafe(nil), String)

# Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless
#
# @note `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute's value should be `https://www.example.com/`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#165
OpenTelemetry::SemanticConventions::Trace::HTTP_URL = T.let(T.unsafe(nil), String)

# Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#185
OpenTelemetry::SemanticConventions::Trace::HTTP_USER_AGENT = T.let(T.unsafe(nil), String)

# Compressed size of the message in bytes
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#480
OpenTelemetry::SemanticConventions::Trace::MESSAGE_COMPRESSED_SIZE = T.let(T.unsafe(nil), String)

# MUST be calculated as two different counters starting from `1` one for sent messages and one for received message
#
# @note This way we guarantee that the values will be consistent between different implementations
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#477
OpenTelemetry::SemanticConventions::Trace::MESSAGE_ID = T.let(T.unsafe(nil), String)

# Whether this is a received or sent message
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#473
OpenTelemetry::SemanticConventions::Trace::MESSAGE_TYPE = T.let(T.unsafe(nil), String)

# Uncompressed size of the message in bytes
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#483
OpenTelemetry::SemanticConventions::Trace::MESSAGE_UNCOMPRESSED_SIZE = T.let(T.unsafe(nil), String)

# The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#415
OpenTelemetry::SemanticConventions::Trace::MESSAGING_CONSUMER_ID = T.let(T.unsafe(nil), String)

# The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called "Correlation ID"
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#275
OpenTelemetry::SemanticConventions::Trace::MESSAGING_CONVERSATION_ID = T.let(T.unsafe(nil), String)

# The message destination name. This might be equal to the span name but is required nevertheless
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#254
OpenTelemetry::SemanticConventions::Trace::MESSAGING_DESTINATION = T.let(T.unsafe(nil), String)

# The kind of message destination
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#257
OpenTelemetry::SemanticConventions::Trace::MESSAGING_DESTINATION_KIND = T.let(T.unsafe(nil), String)

# Client Id for the Consumer or Producer that is handling the message
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#428
OpenTelemetry::SemanticConventions::Trace::MESSAGING_KAFKA_CLIENT_ID = T.let(T.unsafe(nil), String)

# Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#425
OpenTelemetry::SemanticConventions::Trace::MESSAGING_KAFKA_CONSUMER_GROUP = T.let(T.unsafe(nil), String)

# Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message_id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set
#
# @note If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#422
OpenTelemetry::SemanticConventions::Trace::MESSAGING_KAFKA_MESSAGE_KEY = T.let(T.unsafe(nil), String)

# Partition the message is sent to
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#431
OpenTelemetry::SemanticConventions::Trace::MESSAGING_KAFKA_PARTITION = T.let(T.unsafe(nil), String)

# A boolean that is true if the message is a tombstone
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#434
OpenTelemetry::SemanticConventions::Trace::MESSAGING_KAFKA_TOMBSTONE = T.let(T.unsafe(nil), String)

# A value used by the messaging system as an identifier for the message, represented as a string
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#272
OpenTelemetry::SemanticConventions::Trace::MESSAGING_MESSAGE_ID = T.let(T.unsafe(nil), String)

# The compressed size of the message payload in bytes
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#281
OpenTelemetry::SemanticConventions::Trace::MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = T.let(T.unsafe(nil), String)

# The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#278
OpenTelemetry::SemanticConventions::Trace::MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = T.let(T.unsafe(nil), String)

# A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is "send", this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#412
OpenTelemetry::SemanticConventions::Trace::MESSAGING_OPERATION = T.let(T.unsafe(nil), String)

# The name of the transport protocol
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#263
OpenTelemetry::SemanticConventions::Trace::MESSAGING_PROTOCOL = T.let(T.unsafe(nil), String)

# The version of the transport protocol
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#266
OpenTelemetry::SemanticConventions::Trace::MESSAGING_PROTOCOL_VERSION = T.let(T.unsafe(nil), String)

# RabbitMQ message routing key
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#418
OpenTelemetry::SemanticConventions::Trace::MESSAGING_RABBITMQ_ROUTING_KEY = T.let(T.unsafe(nil), String)

# Name of the RocketMQ producer/consumer group that is handling the message. The client type is identified by the SpanKind
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#440
OpenTelemetry::SemanticConventions::Trace::MESSAGING_ROCKETMQ_CLIENT_GROUP = T.let(T.unsafe(nil), String)

# The unique identifier for each client
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#443
OpenTelemetry::SemanticConventions::Trace::MESSAGING_ROCKETMQ_CLIENT_ID = T.let(T.unsafe(nil), String)

# Model of message consumption. This only applies to consumer spans
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#455
OpenTelemetry::SemanticConventions::Trace::MESSAGING_ROCKETMQ_CONSUMPTION_MODEL = T.let(T.unsafe(nil), String)

# Key(s) of message, another way to mark message besides message id
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#452
OpenTelemetry::SemanticConventions::Trace::MESSAGING_ROCKETMQ_MESSAGE_KEYS = T.let(T.unsafe(nil), String)

# The secondary classifier of message besides topic
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#449
OpenTelemetry::SemanticConventions::Trace::MESSAGING_ROCKETMQ_MESSAGE_TAG = T.let(T.unsafe(nil), String)

# Type of message
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#446
OpenTelemetry::SemanticConventions::Trace::MESSAGING_ROCKETMQ_MESSAGE_TYPE = T.let(T.unsafe(nil), String)

# Namespace of RocketMQ resources, resources in different namespaces are individual
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#437
OpenTelemetry::SemanticConventions::Trace::MESSAGING_ROCKETMQ_NAMESPACE = T.let(T.unsafe(nil), String)

# A string identifying the messaging system
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#251
OpenTelemetry::SemanticConventions::Trace::MESSAGING_SYSTEM = T.let(T.unsafe(nil), String)

# A boolean that is true if the message destination is temporary
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#260
OpenTelemetry::SemanticConventions::Trace::MESSAGING_TEMP_DESTINATION = T.let(T.unsafe(nil), String)

# Connection string
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#269
OpenTelemetry::SemanticConventions::Trace::MESSAGING_URL = T.let(T.unsafe(nil), String)

# The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#248
OpenTelemetry::SemanticConventions::Trace::NET_HOST_CARRIER_ICC = T.let(T.unsafe(nil), String)

# The mobile carrier country code
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#242
OpenTelemetry::SemanticConventions::Trace::NET_HOST_CARRIER_MCC = T.let(T.unsafe(nil), String)

# The mobile carrier network code
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#245
OpenTelemetry::SemanticConventions::Trace::NET_HOST_CARRIER_MNC = T.let(T.unsafe(nil), String)

# The name of the mobile carrier
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#239
OpenTelemetry::SemanticConventions::Trace::NET_HOST_CARRIER_NAME = T.let(T.unsafe(nil), String)

# This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#236
OpenTelemetry::SemanticConventions::Trace::NET_HOST_CONNECTION_SUBTYPE = T.let(T.unsafe(nil), String)

# The internet connection type currently being used by the host
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#233
OpenTelemetry::SemanticConventions::Trace::NET_HOST_CONNECTION_TYPE = T.let(T.unsafe(nil), String)

# Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#224
OpenTelemetry::SemanticConventions::Trace::NET_HOST_IP = T.let(T.unsafe(nil), String)

# Local hostname or similar, see note below
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#230
OpenTelemetry::SemanticConventions::Trace::NET_HOST_NAME = T.let(T.unsafe(nil), String)

# Like `net.peer.port` but for the host port
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#227
OpenTelemetry::SemanticConventions::Trace::NET_HOST_PORT = T.let(T.unsafe(nil), String)

# Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#61
OpenTelemetry::SemanticConventions::Trace::NET_PEER_IP = T.let(T.unsafe(nil), String)

# Remote hostname or similar, see note below
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#58
OpenTelemetry::SemanticConventions::Trace::NET_PEER_NAME = T.let(T.unsafe(nil), String)

# Remote port number
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#64
OpenTelemetry::SemanticConventions::Trace::NET_PEER_PORT = T.let(T.unsafe(nil), String)

# Transport protocol used. See note below
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#67
OpenTelemetry::SemanticConventions::Trace::NET_TRANSPORT = T.let(T.unsafe(nil), String)

# Parent-child Reference type
#
# @note The causal relationship between a child Span and a parent Span
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#31
OpenTelemetry::SemanticConventions::Trace::OPENTRACING_REF_TYPE = T.let(T.unsafe(nil), String)

# The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#305
OpenTelemetry::SemanticConventions::Trace::PEER_SERVICE = T.let(T.unsafe(nil), String)

# The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#458
OpenTelemetry::SemanticConventions::Trace::RPC_GRPC_STATUS_CODE = T.let(T.unsafe(nil), String)

# `error.code` property of response if it is an error response
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#467
OpenTelemetry::SemanticConventions::Trace::RPC_JSONRPC_ERROR_CODE = T.let(T.unsafe(nil), String)

# `error.message` property of response if it is an error response
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#470
OpenTelemetry::SemanticConventions::Trace::RPC_JSONRPC_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#464
OpenTelemetry::SemanticConventions::Trace::RPC_JSONRPC_REQUEST_ID = T.let(T.unsafe(nil), String)

# Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#461
OpenTelemetry::SemanticConventions::Trace::RPC_JSONRPC_VERSION = T.let(T.unsafe(nil), String)

# The name of the operation corresponding to the request, as returned by the AWS SDK
#
# @note This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#343
OpenTelemetry::SemanticConventions::Trace::RPC_METHOD = T.let(T.unsafe(nil), String)

# The name of the service to which a request is made, as returned by the AWS SDK
#
# @note This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#339
OpenTelemetry::SemanticConventions::Trace::RPC_SERVICE = T.let(T.unsafe(nil), String)

# The value `aws-api`
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#335
OpenTelemetry::SemanticConventions::Trace::RPC_SYSTEM = T.let(T.unsafe(nil), String)

# Current "managed" thread ID (as opposed to OS thread ID)
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#317
OpenTelemetry::SemanticConventions::Trace::THREAD_ID = T.let(T.unsafe(nil), String)

# Current thread name
#
# source://opentelemetry-semantic_conventions//lib/opentelemetry/semantic_conventions/trace.rb#320
OpenTelemetry::SemanticConventions::Trace::THREAD_NAME = T.let(T.unsafe(nil), String)
