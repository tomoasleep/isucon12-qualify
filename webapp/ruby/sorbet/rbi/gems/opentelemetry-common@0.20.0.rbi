# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-common` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-common`.

# OpenTelemetry is an open source observability framework, providing a
# general-purpose API, SDK, and related tools required for the instrumentation
# of cloud-native software, frameworks, and libraries.
#
# The OpenTelemetry module provides global accessors for telemetry objects.
# See the documentation for the `opentelemetry-api` gem for details.
#
# source://opentelemetry-common//lib/opentelemetry/common/http.rb#7
module OpenTelemetry
  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#36
  def error_handler; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def error_handler=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#44
  def handle_error(exception: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#30
  def logger; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def logger=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#69
  def propagation; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#27
  def propagation=(_arg0); end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#64
  def tracer_provider; end

  # source://opentelemetry-api/1.1.0/lib/opentelemetry.rb#52
  def tracer_provider=(provider); end
end

# Common contains common helpers for semantic conventions, context propagation, etc.
#
# source://opentelemetry-common//lib/opentelemetry/common/http.rb#8
module OpenTelemetry::Common; end

# HTTP contains common helpers for context propagation and semantic conventions.
#
# source://opentelemetry-common//lib/opentelemetry/common/http.rb#10
module OpenTelemetry::Common::HTTP; end

# ClientContext contains common helpers for context propagation
#
# source://opentelemetry-common//lib/opentelemetry/common/http/client_context.rb#11
module OpenTelemetry::Common::HTTP::ClientContext
  extend ::OpenTelemetry::Common::HTTP::ClientContext

  # Returns the attributes hash representing the HTTP client context found
  # in the optional context or the current context if none is provided.
  #
  # @param context [optional Context] The context to lookup the current
  #   attributes hash. Defaults to Context.current
  #
  # source://opentelemetry-common//lib/opentelemetry/common/http/client_context.rb#23
  def attributes(context = T.unsafe(nil)); end

  # Returns a context containing the merged attributes hash, derived from the
  # optional parent context, or the current context if one was not provided.
  #
  # @param context [optional Context] The context to use as the parent for
  #   the returned context
  #
  # source://opentelemetry-common//lib/opentelemetry/common/http/client_context.rb#33
  def context_with_attributes(attributes_hash, parent_context: T.unsafe(nil)); end

  # Activates/deactivates the merged attributes hash within the current Context,
  # which makes the "current attributes hash" available implicitly.
  #
  # On exit, the attributes hash that was active before calling this method
  # will be reactivated.
  #
  # @param span [Span] the span to activate
  # @yield [Hash, Context] yields attributes hash and a context containing the
  #   attributes hash to the block.
  #
  # source://opentelemetry-common//lib/opentelemetry/common/http/client_context.rb#47
  def with_attributes(attributes_hash); end
end

# source://opentelemetry-common//lib/opentelemetry/common/http/client_context.rb#14
OpenTelemetry::Common::HTTP::ClientContext::CURRENT_ATTRIBUTES_HASH = T.let(T.unsafe(nil), OpenTelemetry::Context::Key)

# Propagation contains common helpers for context propagation.
#
# source://opentelemetry-common//lib/opentelemetry/common/propagation/rack_env_getter.rb#9
module OpenTelemetry::Common::Propagation
  extend ::OpenTelemetry::Common::Propagation

  # Returns a {RackEnvGetter} instance suitable for reading values from a
  # Rack environment.
  #
  # source://opentelemetry-common//lib/opentelemetry/common/propagation.rb#22
  def rack_env_getter; end

  # Returns a {SymbolKeyGetter} instance for reading values from a
  # symbol keyed hash.
  #
  # source://opentelemetry-common//lib/opentelemetry/common/propagation.rb#28
  def symbol_key_getter; end
end

# source://opentelemetry-common//lib/opentelemetry/common/propagation.rb#16
OpenTelemetry::Common::Propagation::RACK_ENV_GETTER = T.let(T.unsafe(nil), OpenTelemetry::Common::Propagation::RackEnvGetter)

# The RackEnvGetter class provides a common methods for reading
# keys from a rack environment. It abstracts away the rack-normalization
# process so that keys can be looked up without having to transform them
# first. With this class you can get +traceparent+ instead of
# +HTTP_TRACEPARENT+
#
# source://opentelemetry-common//lib/opentelemetry/common/propagation/rack_env_getter.rb#15
class OpenTelemetry::Common::Propagation::RackEnvGetter
  # Converts key into a rack-normalized key and reads it from the carrier.
  # Useful for extract operations.
  #
  # source://opentelemetry-common//lib/opentelemetry/common/propagation/rack_env_getter.rb#18
  def get(carrier, key); end

  # Reads all keys from a carrier and converts them from the rack-normalized
  # form to the original. The resulting keys will be lowercase and
  # underscores will be replaced with dashes.
  #
  # source://opentelemetry-common//lib/opentelemetry/common/propagation/rack_env_getter.rb#25
  def keys(carrier); end

  private

  # source://opentelemetry-common//lib/opentelemetry/common/propagation/rack_env_getter.rb#38
  def from_rack_key(key); end

  # source://opentelemetry-common//lib/opentelemetry/common/propagation/rack_env_getter.rb#31
  def to_rack_key(key); end
end

# source://opentelemetry-common//lib/opentelemetry/common/propagation.rb#17
OpenTelemetry::Common::Propagation::SYMBOL_KEY_GETTER = T.let(T.unsafe(nil), OpenTelemetry::Common::Propagation::SymbolKeyGetter)

# The SymbolKeyGetter class provides a common method for reading
# symbol keys from a hash.
#
# source://opentelemetry-common//lib/opentelemetry/common/propagation/symbol_key_getter.rb#12
class OpenTelemetry::Common::Propagation::SymbolKeyGetter
  # Converts key into a symbol and reads it from the carrier.
  # Useful for extract operations.
  #
  # source://opentelemetry-common//lib/opentelemetry/common/propagation/symbol_key_getter.rb#15
  def get(carrier, key); end

  # Reads all keys from a carrier
  #
  # source://opentelemetry-common//lib/opentelemetry/common/propagation/symbol_key_getter.rb#20
  def keys(carrier); end
end

# Utilities contains common helpers.
#
# source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#10
module OpenTelemetry::Common::Utilities
  extend ::OpenTelemetry::Common::Utilities

  # Returns a URL string with userinfo removed.
  #
  # @param url [String] The URL string to cleanse.
  # @return [String] the cleansed URL.
  #
  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#107
  def cleanse_url(url); end

  # Returns the first non nil environment variable requested,
  # or the default value if provided.
  #
  # @param env_vars [String] The environment variable(s) to retrieve
  # @param default The fallback value to return if the requested
  #   env var(s) are not present
  #
  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#124
  def config_opt(*env_vars, default: T.unsafe(nil)); end

  # Returns nil if timeout is nil, 0 if timeout has expired,
  # or the remaining (positive) time left in seconds.
  #
  # @param timeout [Numeric] The timeout in seconds. May be nil.
  # @param start_time [Numeric] Start time for timeout returned
  #   by {timeout_timestamp}.
  # @return [Numeric] remaining (positive) time left in seconds.
  #   May be nil.
  #
  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#27
  def maybe_timeout(timeout, start_time); end

  # Returns a timestamp suitable to pass as the start_time
  # argument to {maybe_timeout}. This has no meaning outside
  # of the current process.
  #
  # @return [Numeric]
  #
  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#39
  def timeout_timestamp; end

  # Truncates a string if it exceeds the size provided.
  #
  # @param string [String] The string to be truncated
  # @param size [Integer] The max size of the string
  # @return [String]
  #
  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#74
  def truncate(string, size); end

  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#78
  def truncate_attribute_value(value, limit); end

  # Disables tracing within the provided block.
  #
  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#90
  def untraced; end

  # Detects whether the current context has been set to disable tracing.
  #
  # @return [Boolean]
  #
  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#97
  def untraced?(context = T.unsafe(nil)); end

  # Encodes a string in utf8
  #
  # @param string [String] The string to be utf8 encoded
  # @param binary [optional boolean] This option is for displaying binary data
  # @param placeholder [optional String] The fallback string to be used if encoding fails
  # @return [String]
  #
  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#50
  def utf8_encode(string, binary: T.unsafe(nil), placeholder: T.unsafe(nil)); end

  # Returns true if exporter is a valid exporter.
  #
  # @return [Boolean]
  #
  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#143
  def valid_exporter?(exporter); end

  # Returns a true if the provided url is valid
  #
  # @param url [String] the URL string to test validity
  # @return [boolean]
  #
  # source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#133
  def valid_url?(url); end
end

# source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#16
OpenTelemetry::Common::Utilities::STRING_PLACEHOLDER = T.let(T.unsafe(nil), String)

# source://opentelemetry-common//lib/opentelemetry/common/utilities.rb#13
OpenTelemetry::Common::Utilities::UNTRACED_KEY = T.let(T.unsafe(nil), OpenTelemetry::Context::Key)

# source://opentelemetry-common//lib/opentelemetry/common/version.rb#9
OpenTelemetry::Common::VERSION = T.let(T.unsafe(nil), String)
